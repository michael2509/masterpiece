{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import axios from'axios';import listServerErrors from\"../../global/functions/listServerErrors\";import{openNotification}from\"../../Notification/notificationActions\";// Action to create a new speaker\nexport function createSpeaker(speaker){return function _callee(dispatch){var speakerJson,statusCode,data,errorMessages;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:speakerJson=JSON.stringify(speaker);_context.prev=1;_context.next=4;return _regeneratorRuntime.awrap(axios.post('http://localhost:8081/api/speakers',speakerJson,{headers:{'Content-Type':'application/json'}}));case 4:dispatch(openNotification(\"Compte crée avec succès\",\"success\"));return _context.abrupt(\"return\",true);case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);statusCode=_context.t0.response.status;data=_context.t0.response.data;errorMessages=listServerErrors(statusCode,data);dispatch(openNotification(errorMessages,\"error\"));return _context.abrupt(\"return\",false);case 15:case\"end\":return _context.stop();}}},null,null,[[1,8]]);};}","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Auth/SignUp/signUpActions.js"],"names":["axios","listServerErrors","openNotification","createSpeaker","speaker","dispatch","speakerJson","JSON","stringify","post","headers","statusCode","response","status","data","errorMessages"],"mappings":"6HAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,yCAA7B,CACA,OAASC,gBAAT,KAAiC,wCAAjC,CAEA;AACA,MAAO,SAASC,CAAAA,aAAT,CAAuBC,OAAvB,CAAgC,CAEnC,MAAO,kBAAOC,QAAP,iKAEGC,WAFH,CAEiBC,IAAI,CAACC,SAAL,CAAeJ,OAAf,CAFjB,kEAKOJ,KAAK,CAACS,IAAN,CAAW,oCAAX,CAAiDH,WAAjD,CAA8D,CAAEI,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAAX,CAA9D,CALP,SAMCL,QAAQ,CAACH,gBAAgB,CAAC,yBAAD,CAA4B,SAA5B,CAAjB,CAAR,CAND,gCAOQ,IAPR,0DAUOS,UAVP,CAUoB,YAAMC,QAAN,CAAeC,MAVnC,CAWOC,IAXP,CAWc,YAAMF,QAAN,CAAeE,IAX7B,CAYOC,aAZP,CAYuBd,gBAAgB,CAACU,UAAD,CAAaG,IAAb,CAZvC,CAaCT,QAAQ,CAACH,gBAAgB,CAACa,aAAD,CAAgB,OAAhB,CAAjB,CAAR,CAbD,gCAcQ,KAdR,mEAAP,CAiBH","sourcesContent":["import axios from 'axios';\r\nimport listServerErrors from \"../../global/functions/listServerErrors\";\r\nimport { openNotification } from \"../../Notification/notificationActions\";\r\n\r\n// Action to create a new speaker\r\nexport function createSpeaker(speaker) {\r\n    \r\n    return async (dispatch) => {\r\n        \r\n        const speakerJson = JSON.stringify(speaker);\r\n        \r\n        try {\r\n            await axios.post('http://localhost:8081/api/speakers', speakerJson, { headers: { 'Content-Type': 'application/json' } })\r\n            dispatch(openNotification(\"Compte crée avec succès\", \"success\"))\r\n            return true\r\n        }\r\n        catch (error) {\r\n            const statusCode = error.response.status\r\n            const data = error.response.data\r\n            const errorMessages = listServerErrors(statusCode, data);\r\n            dispatch(openNotification(errorMessages, \"error\"))\r\n            return false\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}