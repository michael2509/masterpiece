{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component,Fragment,createRef}from\"react\";import{connect}from\"react-redux\";import MessageList from\"./MessageList/MessageList\";import AddMessage from\"./AddMessage/AddMessage\";import SockJsClient from'react-stomp';import{addMessage as _addMessage,getMessageList as _getMessageList}from\"./messageActions\";import listServerErrors from\"../global/functions/listServerErrors\";import{openNotification as _openNotification}from\"../Notification/notificationActions\";import{withRouter}from\"react-router-dom\";// Message container to connect to app state using redux\nvar MessageContainer=/*#__PURE__*/function(_Component){_inherits(MessageContainer,_Component);function MessageContainer(){var _this;_classCallCheck(this,MessageContainer);_this=_possibleConstructorReturn(this,_getPrototypeOf(MessageContainer).call(this));_this.sockJsClient=createRef();return _this;}_createClass(MessageContainer,[{key:\"componentDidMount\",value:function componentDidMount(){// Get chat's messages\nconsole.log(\"component did mount\");this.props.getMessageList(this.props.chat.id);}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(prevProps.chat.id!==this.props.chat.id){console.log(\"component did update\");this.props.getMessageList(this.props.chat.id);}}},{key:\"handleMessage\",value:function handleMessage(response,topic){var body=response.body,statusCode=response.statusCode,statusCodeValue=response.statusCodeValue;console.log(body);// Message received with success\nif(statusCode===\"OK\"&&body!==null){this.props.addMessage(body.senderName,body.text);}// Show success notif if message sent with success\nif(topic===\"/user/queue/success\"){this.props.openNotification(\"Message envoyé\",\"success\");}// Show error notif if message sending failed\nif(topic===\"/user/queue/errors\"){console.log(response);var errorsMsg=listServerErrors(statusCodeValue,body);this.props.openNotification(errorsMsg,\"error\");}}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(Fragment,null,React.createElement(MessageList,{messages:this.props.messages}),React.createElement(AddMessage,{chatId:this.props.chat.id,senderName:this.props.chat.senderName,senderType:this.props.chat.senderType,sockJsClient:this.sockJsClient.current}),React.createElement(SockJsClient,{url:\"http://localhost:8081/websocket-chat/\",topics:['/topic/user',\"/user/queue/errors\",\"/user/queue/success\"],onConnect:function onConnect(){console.log(\"connected\");},onDisconnect:function onDisconnect(){console.log(\"Disconnected\");},onMessage:function onMessage(response,topic){return _this2.handleMessage(response,topic);},ref:this.sockJsClient}));}}]);return MessageContainer;}(Component);// Part of the app state to retrieve\nvar mapStateToProps=function mapStateToProps(state){return{messages:state.messages,chat:state.SingleChat};};// Actions to retrieve\nvar mapDispatchToProps=function mapDispatchToProps(dispatch){return{getMessageList:function getMessageList(chatId){return dispatch(_getMessageList(chatId));},addMessage:function addMessage(username,message){return dispatch(_addMessage(username,message));},openNotification:function openNotification(messages,severity){return dispatch(_openNotification(messages,severity));}};};export default connect(mapStateToProps,mapDispatchToProps)(withRouter(MessageContainer));","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Message/MessageContainer.jsx"],"names":["React","Component","Fragment","createRef","connect","MessageList","AddMessage","SockJsClient","addMessage","getMessageList","listServerErrors","openNotification","withRouter","MessageContainer","sockJsClient","console","log","props","chat","id","prevProps","response","topic","body","statusCode","statusCodeValue","senderName","text","errorsMsg","messages","senderType","current","handleMessage","mapStateToProps","state","SingleChat","mapDispatchToProps","dispatch","chatId","username","message","severity"],"mappings":"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","sourcesContent":["import React, { Component, Fragment, createRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport MessageList from \"./MessageList/MessageList\";\r\nimport AddMessage from \"./AddMessage/AddMessage\";\r\nimport SockJsClient from 'react-stomp';\r\nimport { addMessage, getMessageList } from \"./messageActions\";\r\nimport listServerErrors from \"../global/functions/listServerErrors\";\r\nimport { openNotification } from \"../Notification/notificationActions\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n// Message container to connect to app state using redux\r\nclass MessageContainer extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.sockJsClient = createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Get chat's messages\r\n        console.log(\"component did mount\");\r\n        this.props.getMessageList(this.props.chat.id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.chat.id !== this.props.chat.id) {\r\n            console.log(\"component did update\");\r\n            this.props.getMessageList(this.props.chat.id);\r\n        }\r\n    }\r\n\r\n    handleMessage(response, topic) {\r\n        const { body, statusCode, statusCodeValue } = response;\r\n\r\n        console.log(body);\r\n\r\n        // Message received with success\r\n        if (statusCode === \"OK\" && body !== null) {\r\n            this.props.addMessage(body.senderName, body.text);\r\n        }\r\n        // Show success notif if message sent with success\r\n        if (topic === \"/user/queue/success\") {\r\n            this.props.openNotification(\"Message envoyé\", \"success\");\r\n        }\r\n        // Show error notif if message sending failed\r\n        if(topic === \"/user/queue/errors\") {\r\n            console.log(response);\r\n            const errorsMsg = listServerErrors(statusCodeValue, body)\r\n            this.props.openNotification(errorsMsg, \"error\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <MessageList messages={this.props.messages} />\r\n                <AddMessage chatId={this.props.chat.id} senderName={this.props.chat.senderName} senderType={this.props.chat.senderType} sockJsClient={this.sockJsClient.current} />\r\n                <SockJsClient\r\n                    url='http://localhost:8081/websocket-chat/'\r\n                    topics={['/topic/user', \"/user/queue/errors\", \"/user/queue/success\"]}\r\n                    onConnect={() => {\r\n                        console.log(\"connected\");\r\n                    }}\r\n                    onDisconnect={() => {\r\n                        console.log(\"Disconnected\");\r\n                    }}\r\n                    onMessage={(response, topic) => this.handleMessage(response, topic)}\r\n                    ref={this.sockJsClient}\r\n                />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n// Part of the app state to retrieve\r\nconst mapStateToProps = (state) => ({\r\n    messages: state.messages,\r\n    chat: state.SingleChat\r\n})\r\n\r\n\r\n// Actions to retrieve\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getMessageList: (chatId) => dispatch(getMessageList(chatId)),\r\n    addMessage: (username, message) => dispatch(addMessage(username, message)),\r\n    openNotification: (messages, severity) => dispatch(openNotification(messages, severity))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(MessageContainer));"]},"metadata":{},"sourceType":"module"}