{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import{Container}from\"@material-ui/core\";import React,{Component}from\"react\";import{connect}from\"react-redux\";import SingleChat from\"./SingleChat\";import{getSingleChat as _getSingleChat,openCreateGuest as _openCreateGuest,closeCreateGuest as _closeCreateGuest,setSenderName as _setSenderName,setSenderType as _setSenderType}from\"./singleChatActions\";import{openNotification as _openNotification}from\"../../Notification/notificationActions\";import MessageContainer from\"../../Message/MessageContainer\";import{isLogged,getUsername}from\"../../Auth/authService\";import CreateGuest from\"./CreateGuest\";var SingleChatContainer=/*#__PURE__*/function(_Component){_inherits(SingleChatContainer,_Component);function SingleChatContainer(){_classCallCheck(this,SingleChatContainer);return _possibleConstructorReturn(this,_getPrototypeOf(SingleChatContainer).apply(this,arguments));}_createClass(SingleChatContainer,[{key:\"componentDidMount\",value:function componentDidMount(){var _this=this;var chatId=this.props.location.state.chatId;// Get chat data\nthis.props.getSingleChat(chatId);// If user is logged (the speaker of the chat), Set id of the logged user in the component state\nif(isLogged()){console.log(\"is logged\");getUsername().then(function(username){console.log(\"username : \"+username);username?_this.props.setSenderName(username):console.log(\"speaker username not found\");_this.props.setSenderType(\"speaker\");});}else{// else create a guest for this chat\nthis.props.openCreateGuest();}}},{key:\"render\",value:function render(){var chatId=this.props.match.params.chatId;console.log(this.props.SingleChat);return React.createElement(Container,{component:\"main\",maxWidth:\"md\",style:{minHeight:\"calc(100vh - 150px)\",marginTop:150}},React.createElement(SingleChat,{SingleChat:this.props.SingleChat}),React.createElement(MessageContainer,{chatId:chatId}),React.createElement(CreateGuest,{open:this.props.SingleChat.showCreateGuest,openNotif:this.props.openNotification,chatId:this.props.SingleChat.id,closeForm:this.props.closeCreateGuest,setSenderName:this.props.setSenderName,setSenderType:this.props.setSenderType}));}}]);return SingleChatContainer;}(Component);var mapStateToProps=function mapStateToProps(state){return{SingleChat:state.SingleChat};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{getSingleChat:function getSingleChat(code){return dispatch(_getSingleChat(code));},openNotification:function openNotification(messages,severity){return dispatch(_openNotification(messages,severity));},openCreateGuest:function openCreateGuest(){return dispatch(_openCreateGuest());},closeCreateGuest:function closeCreateGuest(){return dispatch(_closeCreateGuest());},setSenderName:function setSenderName(senderName){return dispatch(_setSenderName(senderName));},setSenderType:function setSenderType(senderType){return dispatch(_setSenderType(senderType));}};};export default connect(mapStateToProps,mapDispatchToProps)(SingleChatContainer);","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Chat/SingleChat/SingleChatContainer.jsx"],"names":["Container","React","Component","connect","SingleChat","getSingleChat","openCreateGuest","closeCreateGuest","setSenderName","setSenderType","openNotification","MessageContainer","isLogged","getUsername","CreateGuest","SingleChatContainer","chatId","props","location","state","console","log","then","username","match","params","minHeight","marginTop","showCreateGuest","id","mapStateToProps","mapDispatchToProps","dispatch","code","messages","severity","senderName","senderType"],"mappings":"4qBAAA,OAASA,SAAT,KAA0B,mBAA1B,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,OAASC,aAAa,GAAbA,CAAAA,cAAT,CAAwBC,eAAe,GAAfA,CAAAA,gBAAxB,CAAyCC,gBAAgB,GAAhBA,CAAAA,iBAAzC,CAA2DC,aAAa,GAAbA,CAAAA,cAA3D,CAA0EC,aAAa,GAAbA,CAAAA,cAA1E,KAA+F,qBAA/F,CACA,OAASC,gBAAgB,GAAhBA,CAAAA,iBAAT,KAAiC,wCAAjC,CACA,MAAOC,CAAAA,gBAAP,KAA6B,gCAA7B,CACA,OAASC,QAAT,CAAmBC,WAAnB,KAAsC,wBAAtC,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,C,GAEMC,CAAAA,mB,uVAEkB,gBAEhB,GAAMC,CAAAA,MAAM,CAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BH,MAAzC,CACA;AACA,KAAKC,KAAL,CAAWZ,aAAX,CAAyBW,MAAzB,EAEA;AACA,GAAIJ,QAAQ,EAAZ,CAAgB,CACZQ,OAAO,CAACC,GAAR,CAAY,WAAZ,EACAR,WAAW,GAAGS,IAAd,CAAmB,SAACC,QAAD,CAAc,CAC7BH,OAAO,CAACC,GAAR,CAAY,cAAgBE,QAA5B,EACAA,QAAQ,CAAG,KAAI,CAACN,KAAL,CAAWT,aAAX,CAAyBe,QAAzB,CAAH,CAAwCH,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAAhD,CACA,KAAI,CAACJ,KAAL,CAAWR,aAAX,CAAyB,SAAzB,EACH,CAJD,EAKH,CAPD,IAOO,CACH;AACA,KAAKQ,KAAL,CAAWX,eAAX,GACH,CACJ,C,uCAEQ,CACL,GAAMU,CAAAA,MAAM,CAAG,KAAKC,KAAL,CAAWO,KAAX,CAAiBC,MAAjB,CAAwBT,MAAvC,CAEAI,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWb,UAAvB,EAEA,MACI,qBAAC,SAAD,EAAW,SAAS,CAAC,MAArB,CAA4B,QAAQ,CAAC,IAArC,CAA0C,KAAK,CAAE,CAAEsB,SAAS,sBAAX,CAAoCC,SAAS,CAAE,GAA/C,CAAjD,EACI,oBAAC,UAAD,EAAY,UAAU,CAAE,KAAKV,KAAL,CAAWb,UAAnC,EADJ,CAEI,oBAAC,gBAAD,EAAkB,MAAM,CAAEY,MAA1B,EAFJ,CAGI,oBAAC,WAAD,EAAa,IAAI,CAAE,KAAKC,KAAL,CAAWb,UAAX,CAAsBwB,eAAzC,CAA0D,SAAS,CAAE,KAAKX,KAAL,CAAWP,gBAAhF,CAAkG,MAAM,CAAE,KAAKO,KAAL,CAAWb,UAAX,CAAsByB,EAAhI,CAAoI,SAAS,CAAE,KAAKZ,KAAL,CAAWV,gBAA1J,CAA4K,aAAa,CAAE,KAAKU,KAAL,CAAWT,aAAtM,CAAqN,aAAa,CAAE,KAAKS,KAAL,CAAWR,aAA/O,EAHJ,CADJ,CAOH,C,iCAlC6BP,S,EAqClC,GAAM4B,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACX,KAAD,QAAY,CAAEf,UAAU,CAAEe,KAAK,CAACf,UAApB,CAAZ,EAAxB,CAEA,GAAM2B,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,QAAe,CACtC3B,aAAa,CAAE,uBAAC4B,IAAD,QAAUD,CAAAA,QAAQ,CAAC3B,cAAa,CAAC4B,IAAD,CAAd,CAAlB,EADuB,CAEtCvB,gBAAgB,CAAE,0BAACwB,QAAD,CAAWC,QAAX,QAAwBH,CAAAA,QAAQ,CAACtB,iBAAgB,CAACwB,QAAD,CAAWC,QAAX,CAAjB,CAAhC,EAFoB,CAGtC7B,eAAe,CAAE,iCAAM0B,CAAAA,QAAQ,CAAC1B,gBAAe,EAAhB,CAAd,EAHqB,CAItCC,gBAAgB,CAAE,kCAAMyB,CAAAA,QAAQ,CAACzB,iBAAgB,EAAjB,CAAd,EAJoB,CAKtCC,aAAa,CAAE,uBAAC4B,UAAD,QAAgBJ,CAAAA,QAAQ,CAACxB,cAAa,CAAC4B,UAAD,CAAd,CAAxB,EALuB,CAMtC3B,aAAa,CAAE,uBAAC4B,UAAD,QAAgBL,CAAAA,QAAQ,CAACvB,cAAa,CAAC4B,UAAD,CAAd,CAAxB,EANuB,CAAf,EAA3B,CASA,cAAelC,CAAAA,OAAO,CAAC2B,eAAD,CAAkBC,kBAAlB,CAAP,CAA6ChB,mBAA7C,CAAf","sourcesContent":["import { Container } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { getSingleChat, openCreateGuest, closeCreateGuest, setSenderName, setSenderType } from \"./singleChatActions\";\r\nimport { openNotification } from \"../../Notification/notificationActions\";\r\nimport MessageContainer from \"../../Message/MessageContainer\";\r\nimport { isLogged, getUsername } from \"../../Auth/authService\";\r\nimport CreateGuest from \"./CreateGuest\";\r\n\r\nclass SingleChatContainer extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        const chatId = this.props.location.state.chatId;\r\n        // Get chat data\r\n        this.props.getSingleChat(chatId);\r\n\r\n        // If user is logged (the speaker of the chat), Set id of the logged user in the component state\r\n        if (isLogged()) {\r\n            console.log(\"is logged\");\r\n            getUsername().then((username) => {\r\n                console.log(\"username : \" + username);\r\n                username ? this.props.setSenderName(username) : console.log(\"speaker username not found\");\r\n                this.props.setSenderType(\"speaker\");\r\n            })\r\n        } else {\r\n            // else create a guest for this chat\r\n            this.props.openCreateGuest();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const chatId = this.props.match.params.chatId\r\n\r\n        console.log(this.props.SingleChat);\r\n\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"md\" style={{ minHeight: `calc(100vh - 150px)`, marginTop: 150}}>\r\n                <SingleChat SingleChat={this.props.SingleChat} />\r\n                <MessageContainer chatId={chatId} />\r\n                <CreateGuest open={this.props.SingleChat.showCreateGuest} openNotif={this.props.openNotification} chatId={this.props.SingleChat.id} closeForm={this.props.closeCreateGuest} setSenderName={this.props.setSenderName} setSenderType={this.props.setSenderType} />\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ SingleChat: state.SingleChat })\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getSingleChat: (code) => dispatch(getSingleChat(code)),\r\n    openNotification: (messages, severity) => dispatch(openNotification(messages, severity)),\r\n    openCreateGuest: () => dispatch(openCreateGuest()),\r\n    closeCreateGuest: () => dispatch(closeCreateGuest()),\r\n    setSenderName: (senderName) => dispatch(setSenderName(senderName)),\r\n    setSenderType: (senderType) => dispatch(setSenderType(senderType)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleChatContainer);"]},"metadata":{},"sourceType":"module"}