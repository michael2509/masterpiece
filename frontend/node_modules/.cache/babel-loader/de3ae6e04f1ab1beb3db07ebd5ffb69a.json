{"ast":null,"code":"import { CLOSE_CREATE_GUEST, OPEN_CREATE_GUEST, SET_GUEST_PSEUDO, SINGLE_ROOM_FOUND } from \"./singleRoomActionsTypes\";\nimport axios from \"axios\";\nimport { openNotification } from \"../../Notification/notificationActions\";\nexport const singleRoomFound = room => ({\n  type: SINGLE_ROOM_FOUND,\n  room: room\n});\nexport const getSingleRoom = roomId => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(`http://localhost:8081/api/chats/${roomId}`);\n      const room = response.data;\n      console.log(room);\n\n      if (room) {\n        dispatch(singleRoomFound(room));\n        return true;\n      } else {\n        dispatch(openNotification(`Aucun salon trouvé avec l'id [${roomId}]`, \"error\"));\n        return false;\n      }\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  };\n};\nexport const getSingleRoomByAccessCode = roomCode => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(`http://localhost:8081/api/chats/getByAccessCode/${roomCode}`);\n      const room = response.data;\n      console.log(room);\n\n      if (room) {\n        dispatch(singleRoomFound(room));\n        return room;\n      } else {\n        dispatch(openNotification(`Aucun salon trouvé avec le code d'accès [${roomCode}]`, \"error\"));\n        return false;\n      }\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  };\n};\nexport const setGuestId = guestId => ({\n  type: SET_GUEST_PSEUDO,\n  guestId: guestId\n});\nexport const openCreateGuest = () => ({\n  type: OPEN_CREATE_GUEST,\n  showCreateGuest: true\n});\nexport const closeCreateGuest = () => ({\n  type: CLOSE_CREATE_GUEST,\n  showCreateGuest: false\n});","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Room/SingleRoom/singleRoomActions.js"],"names":["CLOSE_CREATE_GUEST","OPEN_CREATE_GUEST","SET_GUEST_PSEUDO","SINGLE_ROOM_FOUND","axios","openNotification","singleRoomFound","room","type","getSingleRoom","roomId","dispatch","response","get","data","console","log","e","getSingleRoomByAccessCode","roomCode","setGuestId","guestId","openCreateGuest","showCreateGuest","closeCreateGuest"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,iBAA7B,EAAgDC,gBAAhD,EAAkEC,iBAAlE,QAA2F,0BAA3F;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,wCAAjC;AAEA,OAAO,MAAMC,eAAe,GAAIC,IAAD,KAAW;AACtCC,EAAAA,IAAI,EAAEL,iBADgC;AAEtCI,EAAAA,IAAI,EAAEA;AAFgC,CAAX,CAAxB;AAKP,OAAO,MAAME,aAAa,GAAIC,MAAD,IAAY;AAErC,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,mCAAkCH,MAAO,EAApD,CAAvB;AACA,YAAMH,IAAI,GAAGK,QAAQ,CAACE,IAAtB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;;AAEA,UAAIA,IAAJ,EAAU;AACNI,QAAAA,QAAQ,CAACL,eAAe,CAACC,IAAD,CAAhB,CAAR;AACA,eAAO,IAAP;AACH,OAHD,MAGO;AACHI,QAAAA,QAAQ,CAACN,gBAAgB,CAAE,iCAAgCK,MAAO,GAAzC,EAA6C,OAA7C,CAAjB,CAAR;AACA,eAAO,KAAP;AACH;AAEJ,KAdD,CAcE,OAAMO,CAAN,EAAS;AACPF,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACA,aAAO,KAAP;AACH;AACJ,GAnBD;AAoBH,CAtBM;AAwBP,OAAO,MAAMC,yBAAyB,GAAIC,QAAD,IAAc;AAEnD,SAAO,MAAOR,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,mDAAkDM,QAAS,EAAtE,CAAvB;AACA,YAAMZ,IAAI,GAAGK,QAAQ,CAACE,IAAtB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;;AAEA,UAAIA,IAAJ,EAAU;AACNI,QAAAA,QAAQ,CAACL,eAAe,CAACC,IAAD,CAAhB,CAAR;AACA,eAAOA,IAAP;AACH,OAHD,MAGO;AACHI,QAAAA,QAAQ,CAACN,gBAAgB,CAAE,4CAA2Cc,QAAS,GAAtD,EAA0D,OAA1D,CAAjB,CAAR;AACA,eAAO,KAAP;AACH;AAEJ,KAdD,CAcE,OAAMF,CAAN,EAAS;AACPF,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACA,aAAO,KAAP;AACH;AACJ,GAnBD;AAoBH,CAtBM;AAwBP,OAAO,MAAMG,UAAU,GAAIC,OAAD,KAAc;AACpCb,EAAAA,IAAI,EAAEN,gBAD8B;AAEpCmB,EAAAA,OAAO,EAAEA;AAF2B,CAAd,CAAnB;AAKP,OAAO,MAAMC,eAAe,GAAG,OAAO;AAClCd,EAAAA,IAAI,EAAEP,iBAD4B;AAElCsB,EAAAA,eAAe,EAAE;AAFiB,CAAP,CAAxB;AAKP,OAAO,MAAMC,gBAAgB,GAAG,OAAO;AACnChB,EAAAA,IAAI,EAAER,kBAD6B;AAEnCuB,EAAAA,eAAe,EAAE;AAFkB,CAAP,CAAzB","sourcesContent":["import { CLOSE_CREATE_GUEST, OPEN_CREATE_GUEST, SET_GUEST_PSEUDO, SINGLE_ROOM_FOUND } from \"./singleRoomActionsTypes\";\r\nimport axios from \"axios\";\r\nimport { openNotification } from \"../../Notification/notificationActions\";\r\n\r\nexport const singleRoomFound = (room) => ({\r\n    type: SINGLE_ROOM_FOUND,\r\n    room: room\r\n})\r\n\r\nexport const getSingleRoom = (roomId) => {\r\n\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8081/api/chats/${roomId}`);\r\n            const room = response.data\r\n\r\n            console.log(room);\r\n            \r\n            if (room) {\r\n                dispatch(singleRoomFound(room));\r\n                return true;\r\n            } else {\r\n                dispatch(openNotification(`Aucun salon trouvé avec l'id [${roomId}]`, \"error\"))\r\n                return false;\r\n            }\r\n\r\n        } catch(e) {           \r\n            console.log(e);\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport const getSingleRoomByAccessCode = (roomCode) => {\r\n\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8081/api/chats/getByAccessCode/${roomCode}`);\r\n            const room = response.data\r\n\r\n            console.log(room);\r\n            \r\n            if (room) {\r\n                dispatch(singleRoomFound(room));\r\n                return room;\r\n            } else {\r\n                dispatch(openNotification(`Aucun salon trouvé avec le code d'accès [${roomCode}]`, \"error\"))\r\n                return false;\r\n            }\r\n\r\n        } catch(e) {           \r\n            console.log(e);\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport const setGuestId = (guestId) => ({\r\n    type: SET_GUEST_PSEUDO,\r\n    guestId: guestId\r\n})\r\n\r\nexport const openCreateGuest = () => ({\r\n    type: OPEN_CREATE_GUEST,\r\n    showCreateGuest: true\r\n})\r\n\r\nexport const closeCreateGuest = () => ({\r\n    type: CLOSE_CREATE_GUEST,\r\n    showCreateGuest: false\r\n})"]},"metadata":{},"sourceType":"module"}