{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\src\\\\Room\\\\SingleRoom\\\\SingleRoomContainer.jsx\";\nimport { Container } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport SingleRoom from \"../SingleRoom/SingleRoom\";\nimport { getSingleRoom, openCreateGuest, closeCreateGuest, setGuestPseudo } from \"../SingleRoom/singleRoomActions\";\nimport { openNotification } from \"../../Notification/notificationActions\";\nimport MessageContainer from \"../../Message/MessageContainer\";\nimport { isLogged, getUsername } from \"../../Auth/authService\";\nimport CreateGuest from \"./CreateGuest\";\n\nclass SingleRoomContainer extends Component {\n  componentDidMount() {\n    const chatId = this.props.location.state.roomId; // Get Room data\n\n    this.props.getSingleRoom(chatId); // If user is logged (the speaker of the room), Set id of the logged user in the component state\n\n    if (isLogged()) {\n      console.log(\"is logged\");\n      getUsername().then(username => {\n        console.log(username);\n        username ? this.props.setGuestPseudo(username) : console.log(\"guest pseudo not found\");\n        ;\n      });\n    } else {\n      // else create a guest for this room\n      this.props.openCreateGuest();\n    }\n  }\n\n  render() {\n    const roomId = this.props.match.params.roomId;\n    console.log(this.props.singleRoom);\n    return React.createElement(Container, {\n      component: \"main\",\n      maxWidth: \"md\",\n      style: {\n        minHeight: `calc(100vh - 150px)`,\n        marginTop: 150\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(SingleRoom, {\n      singleRoom: this.props.singleRoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(MessageContainer, {\n      roomId: roomId,\n      guestPseudo: this.props.singleRoom.guestPseudo != null ? this.props.singleRoom.guestPseudo : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(CreateGuest, {\n      open: this.props.singleRoom.showCreateGuest,\n      openNotif: this.props.openNotification,\n      roomId: this.props.singleRoom.id,\n      closeForm: this.props.closeCreateGuest,\n      setGuestPseudo: this.props.setGuestPseudo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  singleRoom: state.singleRoom\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getSingleRoom: code => dispatch(getSingleRoom(code)),\n  openNotification: (messages, severity) => dispatch(openNotification(messages, severity)),\n  openCreateGuest: () => dispatch(openCreateGuest()),\n  closeCreateGuest: () => dispatch(closeCreateGuest()),\n  setGuestPseudo: username => dispatch(setGuestPseudo(username))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleRoomContainer);","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Room/SingleRoom/SingleRoomContainer.jsx"],"names":["Container","React","Component","connect","SingleRoom","getSingleRoom","openCreateGuest","closeCreateGuest","setGuestPseudo","openNotification","MessageContainer","isLogged","getUsername","CreateGuest","SingleRoomContainer","componentDidMount","chatId","props","location","state","roomId","console","log","then","username","render","match","params","singleRoom","minHeight","marginTop","guestPseudo","showCreateGuest","id","mapStateToProps","mapDispatchToProps","dispatch","code","messages","severity"],"mappings":"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","sourcesContent":["import { Container } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport SingleRoom from \"../SingleRoom/SingleRoom\";\r\nimport { getSingleRoom, openCreateGuest, closeCreateGuest, setGuestPseudo } from \"../SingleRoom/singleRoomActions\";\r\nimport { openNotification } from \"../../Notification/notificationActions\";\r\nimport MessageContainer from \"../../Message/MessageContainer\";\r\nimport { isLogged, getUsername } from \"../../Auth/authService\";\r\nimport CreateGuest from \"./CreateGuest\";\r\n\r\nclass SingleRoomContainer extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        const chatId = this.props.location.state.roomId;\r\n        // Get Room data\r\n        this.props.getSingleRoom(chatId);\r\n\r\n        // If user is logged (the speaker of the room), Set id of the logged user in the component state\r\n        if (isLogged()) {\r\n            console.log(\"is logged\");\r\n            getUsername().then((username) => {\r\n                console.log(username);\r\n                username ? this.props.setGuestPseudo(username) : console.log(\"guest pseudo not found\");;\r\n            })\r\n        } else {\r\n            // else create a guest for this room\r\n            this.props.openCreateGuest();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const roomId = this.props.match.params.roomId\r\n\r\n        console.log(this.props.singleRoom);\r\n\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"md\" style={{ minHeight: `calc(100vh - 150px)`, marginTop: 150}}>\r\n                <SingleRoom singleRoom={this.props.singleRoom} />\r\n                <MessageContainer roomId={roomId} guestPseudo={this.props.singleRoom.guestPseudo != null ? this.props.singleRoom.guestPseudo : null} />\r\n                <CreateGuest open={this.props.singleRoom.showCreateGuest} openNotif={this.props.openNotification} roomId={this.props.singleRoom.id} closeForm={this.props.closeCreateGuest} setGuestPseudo={this.props.setGuestPseudo} />\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ singleRoom: state.singleRoom })\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getSingleRoom: (code) => dispatch(getSingleRoom(code)),\r\n    openNotification: (messages, severity) => dispatch(openNotification(messages, severity)),\r\n    openCreateGuest: () => dispatch(openCreateGuest()),\r\n    closeCreateGuest: () => dispatch(closeCreateGuest()),\r\n    setGuestPseudo: (username) => dispatch(setGuestPseudo(username)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleRoomContainer);"]},"metadata":{},"sourceType":"module"}