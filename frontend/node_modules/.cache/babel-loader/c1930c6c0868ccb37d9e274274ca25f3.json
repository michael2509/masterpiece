{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInterfaceLanguage = getInterfaceLanguage;\nexports.getBestMatchingLanguage = getBestMatchingLanguage;\nexports.validateTranslationKeys = validateTranslationKeys;\nexports.randomPseudo = randomPseudo;\n/**\n * Return the current interface language\n * If the navigator object is defined it returns the current navigator language\n * otherwise it falls back to 'en-US'\n * Works in browsers\n */\n\nfunction getInterfaceLanguage() {\n  var defaultLang = 'en-US';\n\n  if (typeof navigator === 'undefined') {\n    return defaultLang;\n  }\n\n  var nav = navigator; // eslint-disable-line no-undef\n\n  if (nav) {\n    if (nav.language) {\n      return nav.language;\n    }\n\n    if (!!nav.languages && !!nav.languages[0]) {\n      return nav.languages[0];\n    }\n\n    if (nav.userLanguage) {\n      return nav.userLanguage;\n    }\n\n    if (nav.browserLanguage) {\n      return nav.browserLanguage;\n    }\n  }\n\n  return defaultLang;\n}\n/**\n * Get the best match based on the language passed and the available languages\n * @param {*} language\n * @param {*} props\n */\n\n\nfunction getBestMatchingLanguage(language, props) {\n  // If an object with the passed language key exists return it\n  if (props[language]) return language; // if the string is composed try to find a match with only the first language identifiers (en-US --> en)\n\n  var idx = language.indexOf('-');\n  var auxLang = idx >= 0 ? language.substring(0, idx) : language;\n  return props[auxLang] ? auxLang : Object.keys(props)[0];\n}\n/**\n * Check that the keys used in the provided strings object don't collide with existing property\n * already defined in the LocalizedStrings object\n * @param {*} translationKeys\n */\n\n\nfunction validateTranslationKeys(translationKeys) {\n  var reservedNames = ['_interfaceLanguage', '_language', '_defaultLanguage', '_defaultLanguageFirstLevelKeys', '_props'];\n  translationKeys.forEach(function (key) {\n    if (reservedNames.indexOf(key) !== -1) {\n      throw new Error(key + ' cannot be used as a key. It is a reserved word.');\n    }\n  });\n}\n/**\n * Get a random pseudo string back after specified a length\n * @param {Number} len - How many characters to get back\n */\n\n\nfunction randomPseudo(len) {\n  var text = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < len; i += 1) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return text;\n}","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/node_modules/localized-strings/lib/utils.js"],"names":["Object","defineProperty","exports","value","getInterfaceLanguage","getBestMatchingLanguage","validateTranslationKeys","randomPseudo","defaultLang","navigator","nav","language","languages","userLanguage","browserLanguage","props","idx","indexOf","auxLang","substring","keys","translationKeys","reservedNames","forEach","key","Error","len","text","possible","i","charAt","Math","floor","random","length"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B;AACAF,OAAO,CAACG,uBAAR,GAAkCA,uBAAlC;AACAH,OAAO,CAACI,uBAAR,GAAkCA,uBAAlC;AACAJ,OAAO,CAACK,YAAR,GAAuBA,YAAvB;AACA;;;;;;;AAMA,SAASH,oBAAT,GAAgC;AAC9B,MAAII,WAAW,GAAG,OAAlB;;AACA,MAAI,OAAOC,SAAP,KAAqB,WAAzB,EAAsC;AACpC,WAAOD,WAAP;AACD;;AACD,MAAIE,GAAG,GAAGD,SAAV,CAL8B,CAKT;;AACrB,MAAIC,GAAJ,EAAS;AACP,QAAIA,GAAG,CAACC,QAAR,EAAkB;AAChB,aAAOD,GAAG,CAACC,QAAX;AACD;;AACD,QAAI,CAAC,CAACD,GAAG,CAACE,SAAN,IAAmB,CAAC,CAACF,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAzB,EAA2C;AACzC,aAAOF,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAP;AACD;;AACD,QAAIF,GAAG,CAACG,YAAR,EAAsB;AACpB,aAAOH,GAAG,CAACG,YAAX;AACD;;AACD,QAAIH,GAAG,CAACI,eAAR,EAAyB;AACvB,aAAOJ,GAAG,CAACI,eAAX;AACD;AACF;;AACD,SAAON,WAAP;AACD;AAED;;;;;;;AAKA,SAASH,uBAAT,CAAiCM,QAAjC,EAA2CI,KAA3C,EAAkD;AAChD;AACA,MAAIA,KAAK,CAACJ,QAAD,CAAT,EAAqB,OAAOA,QAAP,CAF2B,CAIhD;;AACA,MAAIK,GAAG,GAAGL,QAAQ,CAACM,OAAT,CAAiB,GAAjB,CAAV;AACA,MAAIC,OAAO,GAAGF,GAAG,IAAI,CAAP,GAAWL,QAAQ,CAACQ,SAAT,CAAmB,CAAnB,EAAsBH,GAAtB,CAAX,GAAwCL,QAAtD;AACA,SAAOI,KAAK,CAACG,OAAD,CAAL,GAAiBA,OAAjB,GAA2BlB,MAAM,CAACoB,IAAP,CAAYL,KAAZ,EAAmB,CAAnB,CAAlC;AACD;AAED;;;;;;;AAKA,SAAST,uBAAT,CAAiCe,eAAjC,EAAkD;AAChD,MAAIC,aAAa,GAAG,CAAC,oBAAD,EAAuB,WAAvB,EAAoC,kBAApC,EAAwD,gCAAxD,EAA0F,QAA1F,CAApB;AACAD,EAAAA,eAAe,CAACE,OAAhB,CAAwB,UAAUC,GAAV,EAAe;AACrC,QAAIF,aAAa,CAACL,OAAd,CAAsBO,GAAtB,MAA+B,CAAC,CAApC,EAAuC;AACrC,YAAM,IAAIC,KAAJ,CAAUD,GAAG,GAAG,kDAAhB,CAAN;AACD;AACF,GAJD;AAKD;AAED;;;;;;AAIA,SAASjB,YAAT,CAAsBmB,GAAtB,EAA2B;AACzB,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,QAAQ,GAAG,gEAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,IAAI,CAA9B,EAAiC;AAC/BF,IAAAA,IAAI,IAAIC,QAAQ,CAACE,MAAT,CAAgBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,QAAQ,CAACM,MAApC,CAAhB,CAAR;AACD;;AAAA,SAAOP,IAAP;AACF","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInterfaceLanguage = getInterfaceLanguage;\nexports.getBestMatchingLanguage = getBestMatchingLanguage;\nexports.validateTranslationKeys = validateTranslationKeys;\nexports.randomPseudo = randomPseudo;\n/**\n * Return the current interface language\n * If the navigator object is defined it returns the current navigator language\n * otherwise it falls back to 'en-US'\n * Works in browsers\n */\nfunction getInterfaceLanguage() {\n  var defaultLang = 'en-US';\n  if (typeof navigator === 'undefined') {\n    return defaultLang;\n  }\n  var nav = navigator; // eslint-disable-line no-undef\n  if (nav) {\n    if (nav.language) {\n      return nav.language;\n    }\n    if (!!nav.languages && !!nav.languages[0]) {\n      return nav.languages[0];\n    }\n    if (nav.userLanguage) {\n      return nav.userLanguage;\n    }\n    if (nav.browserLanguage) {\n      return nav.browserLanguage;\n    }\n  }\n  return defaultLang;\n}\n\n/**\n * Get the best match based on the language passed and the available languages\n * @param {*} language\n * @param {*} props\n */\nfunction getBestMatchingLanguage(language, props) {\n  // If an object with the passed language key exists return it\n  if (props[language]) return language;\n\n  // if the string is composed try to find a match with only the first language identifiers (en-US --> en)\n  var idx = language.indexOf('-');\n  var auxLang = idx >= 0 ? language.substring(0, idx) : language;\n  return props[auxLang] ? auxLang : Object.keys(props)[0];\n}\n\n/**\n * Check that the keys used in the provided strings object don't collide with existing property\n * already defined in the LocalizedStrings object\n * @param {*} translationKeys\n */\nfunction validateTranslationKeys(translationKeys) {\n  var reservedNames = ['_interfaceLanguage', '_language', '_defaultLanguage', '_defaultLanguageFirstLevelKeys', '_props'];\n  translationKeys.forEach(function (key) {\n    if (reservedNames.indexOf(key) !== -1) {\n      throw new Error(key + ' cannot be used as a key. It is a reserved word.');\n    }\n  });\n}\n\n/**\n * Get a random pseudo string back after specified a length\n * @param {Number} len - How many characters to get back\n */\nfunction randomPseudo(len) {\n  var text = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (var i = 0; i < len; i += 1) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }return text;\n}"]},"metadata":{},"sourceType":"script"}