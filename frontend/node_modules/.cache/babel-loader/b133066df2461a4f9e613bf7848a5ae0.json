{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React from'react';import Button from'@material-ui/core/Button';import TextField from'@material-ui/core/TextField';import Dialog from'@material-ui/core/Dialog';import DialogActions from'@material-ui/core/DialogActions';import DialogContent from'@material-ui/core/DialogContent';import DialogTitle from'@material-ui/core/DialogTitle';import Fab from'@material-ui/core/Fab';import AddIcon from'@material-ui/icons/Add';import{withFormik}from\"formik\";import*as Yup from\"yup\";import{withRouter}from'react-router-dom';import addMessageStyles from'./addMessageStyles';// Add message form component\nvar AddMessageForm=function AddMessageForm(props){var values=props.values,touched=props.touched,errors=props.errors,handleChange=props.handleChange,handleBlur=props.handleBlur,handleSubmit=props.handleSubmit,isSubmitting=props.isSubmitting,setSubmitting=props.setSubmitting;var classes=addMessageStyles();var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),open=_React$useState2[0],setOpen=_React$useState2[1];var handleClickOpen=function handleClickOpen(){setSubmitting(false);setOpen(true);};var handleClose=function handleClose(){setOpen(false);};return React.createElement(\"div\",null,React.createElement(Fab,{onClick:handleClickOpen,className:classes.fab,color:\"primary\",\"aria-label\":\"add\",variant:\"extended\"},React.createElement(AddIcon,{className:classes.extendedIcon}),\"Nouveau message\"),React.createElement(Dialog,{open:isSubmitting?false:open,onClose:handleClose,\"aria-labelledby\":\"form-dialog-title\",disableBackdropClick:true},React.createElement(\"form\",{onSubmit:handleSubmit},React.createElement(DialogTitle,{id:\"form-dialog-title\"},\"Envoyer un nouveau message\"),React.createElement(DialogContent,null,React.createElement(TextField,{id:\"text\",label:\"text\",type:\"text\",fullWidth:true,className:classes.chatNameInput,value:values.text,onChange:handleChange,onBlur:handleBlur,helperText:touched.text?errors.text:\"\",error:touched.text&&Boolean(errors.text),variant:\"outlined\",multiline:true,rows:4,margin:\"dense\"})),React.createElement(DialogActions,null,React.createElement(Button,{color:\"primary\",onClick:handleClose,variant:\"outlined\"},\"Annuler\"),React.createElement(Button,{type:\"submit\",color:\"primary\",variant:\"contained\"},\"Envoyer\")))));};// Add message form component with formik validation\nvar AddMessage=withFormik({mapPropsToValues:function mapPropsToValues(_ref){var text=_ref.text;return{text:text||\"\"};},validationSchema:Yup.object().shape({text:Yup.string().max(255,\"Le texte de votre message ne peut pas dépasser 255 caractères\").required(\"Le texte de votre message ne peut être vide\")}),handleSubmit:function handleSubmit(messageForm,_ref2){var props=_ref2.props,resetForm=_ref2.resetForm,setSubmitting=_ref2.setSubmitting;// Get sockjs client, chatId, senderName, senderType from props\nvar sockJsClient=props.sockJsClient,chatId=props.chatId,senderName=props.senderName,senderType=props.senderType;// Build message obj to be send to the API\nvar message={text:messageForm.text,chatId:chatId,senderName:senderName,senderType:senderType};// Use sock js client to send message to API\nsockJsClient.sendMessage('/app/user-all',JSON.stringify(message));// Reset form\nresetForm();// Close form\nsetSubmitting(true);}})(AddMessageForm);export default withRouter(AddMessage);","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Message/AddMessage/AddMessage.jsx"],"names":["React","Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","Fab","AddIcon","withFormik","Yup","withRouter","addMessageStyles","AddMessageForm","props","values","touched","errors","handleChange","handleBlur","handleSubmit","isSubmitting","setSubmitting","classes","useState","open","setOpen","handleClickOpen","handleClose","fab","extendedIcon","chatNameInput","text","Boolean","AddMessage","mapPropsToValues","validationSchema","object","shape","string","max","required","messageForm","resetForm","sockJsClient","chatId","senderName","senderType","message","sendMessage","JSON","stringify"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { withFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport addMessageStyles from './addMessageStyles';\r\n\r\n// Add message form component\r\nconst AddMessageForm = (props) => {\r\n\r\n    const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setSubmitting\r\n    } = props;        \r\n\r\n    const classes = addMessageStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setSubmitting(false);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n        \r\n    return (\r\n        <div>\r\n        <Fab onClick={handleClickOpen} className={classes.fab} color=\"primary\" aria-label=\"add\" variant=\"extended\">\r\n            <AddIcon className={classes.extendedIcon} />\r\n            Nouveau message\r\n        </Fab>\r\n        <Dialog open={isSubmitting ? false : open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick>\r\n            <form onSubmit={handleSubmit}>\r\n                <DialogTitle id=\"form-dialog-title\">Envoyer un nouveau message</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        id=\"text\"\r\n                        label=\"text\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        className={classes.chatNameInput}\r\n                        value={values.text}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        helperText={touched.text ? errors.text : \"\"}\r\n                        error={touched.text && Boolean(errors.text)}\r\n                        variant=\"outlined\"\r\n                        multiline\r\n                        rows={4}\r\n                        margin=\"dense\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button color=\"primary\" onClick={handleClose} variant=\"outlined\">\r\n                    Annuler\r\n                </Button>\r\n                <Button type=\"submit\" color=\"primary\" variant=\"contained\">\r\n                    Envoyer\r\n                </Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Add message form component with formik validation\r\nconst AddMessage = withFormik({\r\n    mapPropsToValues: ({\r\n        text\r\n    }) => ({\r\n        text: text || \"\"\r\n    }),\r\n\r\n    validationSchema: Yup.object().shape({\r\n        text: Yup.string()\r\n            .max(255, \"Le texte de votre message ne peut pas dépasser 255 caractères\")\r\n            .required(\"Le texte de votre message ne peut être vide\")\r\n    }),\r\n    handleSubmit: (messageForm, { props, resetForm, setSubmitting }) => {\r\n        // Get sockjs client, chatId, senderName, senderType from props\r\n        const { sockJsClient, chatId, senderName, senderType } = props;\r\n        // Build message obj to be send to the API\r\n        const message = { text: messageForm.text, chatId: chatId, senderName: senderName, senderType: senderType };\r\n        // Use sock js client to send message to API\r\n        sockJsClient.sendMessage('/app/user-all', JSON.stringify(message));\r\n        // Reset form\r\n        resetForm();\r\n        // Close form\r\n        setSubmitting(true);\r\n    }\r\n})(AddMessageForm)\r\n\r\nexport default withRouter(AddMessage);"]},"metadata":{},"sourceType":"module"}