{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\src\\\\Message\\\\AddMessage\\\\AddMessage.jsx\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport { withFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { withRouter } from 'react-router-dom'; // Add message form component\n\nconst AddMessageForm = props => {\n  const values = props.values,\n        touched = props.touched,\n        errors = props.errors,\n        handleChange = props.handleChange,\n        handleBlur = props.handleBlur,\n        handleSubmit = props.handleSubmit,\n        isSubmitting = props.isSubmitting,\n        setSubmitting = props.setSubmitting;\n  const classes = addMessageStyles();\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const handleClickOpen = () => {\n    setSubmitting(false);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Fab, {\n    onClick: handleClickOpen,\n    className: classes.fab,\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    variant: \"extended\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(AddIcon, {\n    className: classes.extendedIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), \"Nouveau message\"), React.createElement(Dialog, {\n    open: isSubmitting ? false : open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    disableBackdropClick: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Envoyer un nouveau message\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"text\",\n    label: \"text\",\n    type: \"text\",\n    fullWidth: true,\n    className: classes.chatNameInput,\n    value: values.text,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    helperText: touched.text ? errors.text : \"\",\n    error: touched.text && Boolean(errors.text),\n    variant: \"outlined\",\n    multiline: true,\n    rows: 4,\n    margin: \"dense\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: handleClose,\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Annuler\"), React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Envoyer\")))));\n};\n\nconst AddMessage = withFormik({\n  mapPropsToValues: ({\n    text\n  }) => ({\n    text: text || \"\"\n  }),\n  validationSchema: Yup.object().shape({\n    text: Yup.string().max(255, \"Le texte de votre message ne peut pas dépasser 255 caractères\").required(\"Le texte de votre message ne peut être vide\")\n  }),\n  handleSubmit: (messageForm, {\n    props,\n    resetForm,\n    setSubmitting\n  }) => {\n    // Get sockjs client, chatId, senderName, senderType from props\n    const sockJsClient = props.sockJsClient,\n          chatId = props.chatId,\n          senderName = props.senderName,\n          senderType = props.senderType; // Build message obj to be send to the API\n\n    const message = {\n      text: messageForm.text,\n      chatId: chatId,\n      senderName: senderName,\n      senderType: senderType\n    }; // Use sock js client to send message to API\n\n    sockJsClient.sendMessage('/app/user-all', JSON.stringify(message)); // Reset form\n\n    resetForm(); // Close form\n\n    setSubmitting(true);\n  }\n})(AddMessageForm);\nexport default withRouter(AddMessage);","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Message/AddMessage/AddMessage.jsx"],"names":["React","Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","Fab","AddIcon","withFormik","Yup","withRouter","AddMessageForm","props","values","touched","errors","handleChange","handleBlur","handleSubmit","isSubmitting","setSubmitting","classes","addMessageStyles","useState","open","setOpen","handleClickOpen","handleClose","fab","extendedIcon","chatNameInput","text","Boolean","AddMessage","mapPropsToValues","validationSchema","object","shape","string","max","required","messageForm","resetForm","sockJsClient","chatId","senderName","senderType","message","sendMessage","JSON","stringify"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { withFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\n// Add message form component\r\nconst AddMessageForm = (props) => {\r\n\r\n    const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setSubmitting\r\n    } = props;        \r\n\r\n    const classes = addMessageStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setSubmitting(false);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n        \r\n    return (\r\n        <div>\r\n        <Fab onClick={handleClickOpen} className={classes.fab} color=\"primary\" aria-label=\"add\" variant=\"extended\">\r\n            <AddIcon className={classes.extendedIcon} />\r\n            Nouveau message\r\n        </Fab>\r\n        <Dialog open={isSubmitting ? false : open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" disableBackdropClick>\r\n            <form onSubmit={handleSubmit}>\r\n                <DialogTitle id=\"form-dialog-title\">Envoyer un nouveau message</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        id=\"text\"\r\n                        label=\"text\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        className={classes.chatNameInput}\r\n                        value={values.text}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        helperText={touched.text ? errors.text : \"\"}\r\n                        error={touched.text && Boolean(errors.text)}\r\n                        variant=\"outlined\"\r\n                        multiline\r\n                        rows={4}\r\n                        margin=\"dense\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button color=\"primary\" onClick={handleClose} variant=\"outlined\">\r\n                    Annuler\r\n                </Button>\r\n                <Button type=\"submit\" color=\"primary\" variant=\"contained\">\r\n                    Envoyer\r\n                </Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst AddMessage = withFormik({\r\n    mapPropsToValues: ({\r\n        text\r\n    }) => ({\r\n        text: text || \"\"\r\n    }),\r\n\r\n    validationSchema: Yup.object().shape({\r\n        text: Yup.string()\r\n            .max(255, \"Le texte de votre message ne peut pas dépasser 255 caractères\")\r\n            .required(\"Le texte de votre message ne peut être vide\")\r\n    }),\r\n    handleSubmit: (messageForm, { props, resetForm, setSubmitting }) => {\r\n        // Get sockjs client, chatId, senderName, senderType from props\r\n        const { sockJsClient, chatId, senderName, senderType } = props;\r\n        // Build message obj to be send to the API\r\n        const message = { text: messageForm.text, chatId: chatId, senderName: senderName, senderType: senderType };\r\n        // Use sock js client to send message to API\r\n        sockJsClient.sendMessage('/app/user-all', JSON.stringify(message));\r\n        // Reset form\r\n        resetForm();\r\n        // Close form\r\n        setSubmitting(true);\r\n    }\r\n})(AddMessageForm)\r\n\r\nexport default withRouter(AddMessage);"]},"metadata":{},"sourceType":"module"}