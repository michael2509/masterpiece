{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\src\\\\Chat\\\\SingleChat\\\\SingleChatContainer.jsx\";\nimport { Container } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport SingleChat from \"./SingleChat\";\nimport { getSingleChat, openCreateGuest, closeCreateGuest, setSenderName, setSenderType } from \"./singleChatActions\";\nimport { openNotification } from \"../../Notification/notificationActions\";\nimport MessageContainer from \"../../Message/MessageContainer\";\nimport { isLogged, getUsername } from \"../../Auth/authService\";\nimport CreateGuest from \"./CreateGuest\";\n\nclass SingleChatContainer extends Component {\n  componentDidMount() {\n    const chatId = this.props.location.state.chatId; // Get chat data\n\n    this.props.getSingleChat(chatId); // If user is logged (the speaker of the chat), Set id of the logged user in the component state\n\n    if (isLogged()) {\n      console.log(\"is logged\");\n      getUsername().then(username => {\n        console.log(\"username : \" + username);\n        username ? this.props.setSenderName(username) : console.log(\"speaker username not found\");\n        this.props.setSenderType(\"Speaker\");\n      });\n    } else {\n      // else create a guest for this chat\n      this.props.openCreateGuest();\n    }\n  }\n\n  render() {\n    const chatId = this.props.match.params.chatId;\n    console.log(this.props.SingleChat);\n    return React.createElement(Container, {\n      component: \"main\",\n      maxWidth: \"md\",\n      style: {\n        minHeight: `calc(100vh - 150px)`,\n        marginTop: 150\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(SingleChat, {\n      SingleChat: this.props.SingleChat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(MessageContainer, {\n      chatId: chatId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(CreateGuest, {\n      open: this.props.SingleChat.showCreateGuest,\n      openNotif: this.props.openNotification,\n      chatId: this.props.SingleChat.id,\n      closeForm: this.props.closeCreateGuest,\n      setSenderName: this.props.setSenderName,\n      setSenderType: this.props.setSenderType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  SingleChat: state.SingleChat\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getSingleChat: code => dispatch(getSingleChat(code)),\n  openNotification: (messages, severity) => dispatch(openNotification(messages, severity)),\n  openCreateGuest: () => dispatch(openCreateGuest()),\n  closeCreateGuest: () => dispatch(closeCreateGuest()),\n  setSenderName: senderName => dispatch(setSenderName(senderName)),\n  setSenderType: senderType => dispatch(setSenderType(senderType))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleChatContainer);","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Chat/SingleChat/SingleChatContainer.jsx"],"names":["Container","React","Component","connect","SingleChat","getSingleChat","openCreateGuest","closeCreateGuest","setSenderName","setSenderType","openNotification","MessageContainer","isLogged","getUsername","CreateGuest","SingleChatContainer","componentDidMount","chatId","props","location","state","console","log","then","username","render","match","params","minHeight","marginTop","showCreateGuest","id","mapStateToProps","mapDispatchToProps","dispatch","code","messages","severity","senderName","senderType"],"mappings":"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","sourcesContent":["import { Container } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { getSingleChat, openCreateGuest, closeCreateGuest, setSenderName, setSenderType } from \"./singleChatActions\";\r\nimport { openNotification } from \"../../Notification/notificationActions\";\r\nimport MessageContainer from \"../../Message/MessageContainer\";\r\nimport { isLogged, getUsername } from \"../../Auth/authService\";\r\nimport CreateGuest from \"./CreateGuest\";\r\n\r\nclass SingleChatContainer extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        const chatId = this.props.location.state.chatId;\r\n        // Get chat data\r\n        this.props.getSingleChat(chatId);\r\n\r\n        // If user is logged (the speaker of the chat), Set id of the logged user in the component state\r\n        if (isLogged()) {\r\n            console.log(\"is logged\");\r\n            getUsername().then((username) => {\r\n                console.log(\"username : \" + username);\r\n                username ? this.props.setSenderName(username) : console.log(\"speaker username not found\");\r\n                this.props.setSenderType(\"Speaker\");\r\n            })\r\n        } else {\r\n            // else create a guest for this chat\r\n            this.props.openCreateGuest();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const chatId = this.props.match.params.chatId\r\n\r\n        console.log(this.props.SingleChat);\r\n\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"md\" style={{ minHeight: `calc(100vh - 150px)`, marginTop: 150}}>\r\n                <SingleChat SingleChat={this.props.SingleChat} />\r\n                <MessageContainer chatId={chatId} />\r\n                <CreateGuest open={this.props.SingleChat.showCreateGuest} openNotif={this.props.openNotification} chatId={this.props.SingleChat.id} closeForm={this.props.closeCreateGuest} setSenderName={this.props.setSenderName} setSenderType={this.props.setSenderType} />\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ SingleChat: state.SingleChat })\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getSingleChat: (code) => dispatch(getSingleChat(code)),\r\n    openNotification: (messages, severity) => dispatch(openNotification(messages, severity)),\r\n    openCreateGuest: () => dispatch(openCreateGuest()),\r\n    closeCreateGuest: () => dispatch(closeCreateGuest()),\r\n    setSenderName: (senderName) => dispatch(setSenderName(senderName)),\r\n    setSenderType: (senderType) => dispatch(setSenderType(senderType)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleChatContainer);"]},"metadata":{},"sourceType":"module"}