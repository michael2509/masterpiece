{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\src\\\\App\\\\Navbar\\\\Navbar.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport MeetingRoomIcon from '@material-ui/icons/MeetingRoom';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { useTheme } from '@material-ui/core/styles';\nimport { Link, withRouter } from 'react-router-dom';\nimport \"./Navbar.css\";\nimport { isLogged, logout } from '../../Auth/authService';\nimport { Typography } from '@material-ui/core';\nimport navbarStyles from './navbarStyles'; // Navbar component\n\nfunction Navbar(props) {\n  const container = props.container,\n        history = props.history,\n        openNotification = props.openNotification;\n  const classes = navbarStyles();\n  const theme = useTheme();\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        mobileOpen = _React$useState2[0],\n        setMobileOpen = _React$useState2[1];\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const logoutAndRedirect = () => {\n    logout();\n    openNotification(\"Vous êtes déconnecté\", \"info\");\n    history.push(\"/connexion\");\n  };\n\n  const logged = isLogged();\n  let navLinks; // Display different buttons in navbar if user is logged or not\n\n  if (logged) {\n    navLinks = [{\n      title: 'chats',\n      path: '/chats',\n      icon: React.createElement(MeetingRoomIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })\n    }, {\n      title: 'Déconnexion',\n      icon: React.createElement(ExitToAppIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })\n    }];\n  } else {\n    navLinks = [{\n      title: 'Inscription',\n      path: '/inscription',\n      icon: React.createElement(PersonAddIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })\n    }, {\n      title: 'Connexion',\n      path: '/connexion',\n      icon: React.createElement(AccountCircleIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      })\n    }];\n  }\n\n  const drawer = React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: `${classes.toolbar} drawerLogo ${classes.logoWrapper}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/\",\n    className: \"drawerLink\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"WeChat\"))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, navLinks.map(({\n    title,\n    path,\n    icon\n  }, index) => {\n    if (title === \"Déconnexion\") {\n      return React.createElement(ListItem, {\n        onClick: logoutAndRedirect,\n        key: index,\n        button: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, icon), React.createElement(ListItemText, {\n        primary: title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(Link, {\n        to: path,\n        className: \"drawerLink\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(ListItem, {\n        button: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, icon), React.createElement(ListItemText, {\n        primary: title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })));\n    }\n  })));\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(AppBar, {\n    className: classes.appBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    style: {\n      height: props.navbarHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"open drawer\",\n    edge: \"start\",\n    onClick: handleDrawerToggle,\n    className: classes.menuButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(MenuIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(Link, {\n    to: \"/\",\n    className: \"navbarLink\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"WeChat\")), React.createElement(Hidden, {\n    smDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      flexGrow: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(List, {\n    style: {\n      display: \"flex\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, navLinks.map(({\n    title,\n    path\n  }, index) => {\n    if (title === \"Déconnexion\") {\n      return React.createElement(ListItem, {\n        key: index,\n        onClick: logoutAndRedirect,\n        button: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(ListItemText, {\n        primary: title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(Link, {\n        to: path,\n        className: \"navbarLink\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(ListItem, {\n        button: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(ListItemText, {\n        primary: title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })));\n    }\n  }))))), React.createElement(\"nav\", {\n    className: classes.drawer,\n    \"aria-label\": \"mailbox folders\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Hidden, {\n    smUp: true,\n    implementation: \"css\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(Drawer, {\n    container: container,\n    variant: \"temporary\",\n    anchor: theme.direction === 'rtl' ? 'right' : 'left',\n    open: mobileOpen,\n    onClose: handleDrawerToggle,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    ModalProps: {\n      keepMounted: true // Better open performance on mobile.\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, drawer))));\n}\n\nNavbar.propTypes = {\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\n  container: PropTypes.instanceOf(typeof Element === 'undefined' ? Object : Element)\n};\nexport default withRouter(Navbar);","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/App/Navbar/Navbar.jsx"],"names":["React","PropTypes","AppBar","CssBaseline","Divider","Drawer","Hidden","IconButton","MeetingRoomIcon","PersonAddIcon","AccountCircleIcon","ExitToAppIcon","List","ListItem","ListItemIcon","ListItemText","MenuIcon","Toolbar","useTheme","Link","withRouter","isLogged","logout","Typography","navbarStyles","Navbar","props","container","history","openNotification","classes","theme","useState","mobileOpen","setMobileOpen","handleDrawerToggle","logoutAndRedirect","push","logged","navLinks","title","path","icon","drawer","toolbar","logoWrapper","map","index","root","appBar","height","navbarHeight","menuButton","flexGrow","display","direction","paper","drawerPaper","keepMounted","propTypes","instanceOf","Element","Object"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MeetingRoomIcon from '@material-ui/icons/MeetingRoom';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport \"./Navbar.css\";\r\nimport { isLogged, logout } from '../../Auth/authService';\r\nimport { Typography } from '@material-ui/core';\r\nimport navbarStyles from './navbarStyles';\r\n\r\n// Navbar component\r\nfunction Navbar(props) {\r\n    const { container, history, openNotification } = props;\r\n    const classes = navbarStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n    const logoutAndRedirect = () => {\r\n        logout();\r\n        openNotification(\"Vous êtes déconnecté\", \"info\");\r\n        history.push(\"/connexion\");\r\n    }\r\n\r\n    const logged = isLogged();\r\n    let navLinks;\r\n\r\n    // Display different buttons in navbar if user is logged or not\r\n    if (logged) {\r\n        navLinks = [\r\n            { title: 'chats', path: '/chats', icon: <MeetingRoomIcon /> },\r\n            { title: 'Déconnexion', icon: <ExitToAppIcon /> },\r\n        ]\r\n    } else {\r\n        navLinks = [\r\n            { title: 'Inscription', path: '/inscription', icon: <PersonAddIcon /> },\r\n            { title: 'Connexion', path: '/connexion', icon: <AccountCircleIcon /> },\r\n        ]\r\n    }\r\n\r\n    const drawer = (\r\n        <div>\r\n            <div className={`${classes.toolbar} drawerLogo ${classes.logoWrapper}`}>\r\n                <Link to=\"/\" className=\"drawerLink\">\r\n                    <Typography>WeChat</Typography>\r\n                </Link>\r\n            </div>\r\n            <Divider />\r\n            <List>\r\n                {navLinks.map(({ title, path, icon }, index) => {\r\n                    if (title === \"Déconnexion\") {\r\n                        return (\r\n                            <ListItem onClick={logoutAndRedirect} key={index} button>\r\n                                <ListItemIcon>{icon}</ListItemIcon>\r\n                                <ListItemText primary={title} />\r\n                            </ListItem>\r\n                        )\r\n                    } else {\r\n                        return(\r\n                            <Link to={path} className=\"drawerLink\" key={index}>\r\n                                <ListItem button>\r\n                                        <ListItemIcon>{icon}</ListItemIcon>\r\n                                        <ListItemText primary={title} />\r\n                                </ListItem>\r\n                            </Link>\r\n                        )\r\n                    }\r\n                })}\r\n            </List>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar style={{ height: props.navbarHeight }}>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Link to=\"/\" className=\"navbarLink\">\r\n                        <Typography>WeChat</Typography>\r\n                    </Link>\r\n                    <Hidden smDown>\r\n                        <div style={{ flexGrow: 1 }} />\r\n                        <List style={{ display: \"flex\" }}>\r\n                            {navLinks.map(({ title, path }, index) => {\r\n                                if (title === \"Déconnexion\") {\r\n                                    return (\r\n                                        <ListItem key={index} onClick={logoutAndRedirect} button>\r\n                                            <ListItemText primary={title} />\r\n                                        </ListItem>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <Link to={path} className=\"navbarLink\" key={index}>\r\n                                            <ListItem button>\r\n                                                <ListItemText primary={title} />\r\n                                            </ListItem>\r\n                                        </Link>\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </List>\r\n                    </Hidden>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n                <Hidden smUp implementation=\"css\">\r\n                    <Drawer\r\n                        container={container}\r\n                        variant=\"temporary\"\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true, // Better open performance on mobile.\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    /**\r\n     * Injected by the documentation to work in an iframe.\r\n     * You won't need it on your project.\r\n     */\r\n    container: PropTypes.instanceOf(typeof Element === 'undefined' ? Object : Element),\r\n};\r\n\r\nexport default withRouter(Navbar);"]},"metadata":{},"sourceType":"module"}