{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\src\\\\Room\\\\SingleRoom\\\\SingleRoomContainer.jsx\";\nimport { Container } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport SingleRoom from \"../SingleRoom/SingleRoom\";\nimport { getSingleRoom, openCreateGuest, closeCreateGuest, setcurrentUsername } from \"../SingleRoom/singleRoomActions\";\nimport { openNotification } from \"../../Notification/notificationActions\";\nimport MessageContainer from \"../../Message/MessageContainer\";\nimport { isLogged, getUsername } from \"../../Auth/authService\";\nimport CreateGuest from \"./CreateGuest\";\n\nclass SingleRoomContainer extends Component {\n  componentDidMount() {\n    console.log(this.props.location.state); // Get Room data\n\n    this.props.getSingleRoom(this.props.match.params.code); // If user is logged (the speaker of the room), Set id of the logged user in the component state\n\n    if (isLogged()) {\n      console.log(\"is logged\");\n      getUsername().then(username => {\n        console.log(username);\n        username ? this.props.setcurrentUsername(username) : console.log(\"current username not found\");\n        ;\n      });\n    } else {\n      // else create a guest for this room\n      this.props.openCreateGuest();\n    }\n  }\n\n  render() {\n    const roomCode = this.props.match.params.code;\n    console.log(this.props.singleRoom);\n    return React.createElement(Container, {\n      component: \"main\",\n      maxWidth: \"md\",\n      style: {\n        minHeight: `calc(100vh - 150px)`,\n        marginTop: 150\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(SingleRoom, {\n      singleRoom: this.props.singleRoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(MessageContainer, {\n      roomCode: roomCode,\n      username: this.props.singleRoom.currentUsername,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(CreateGuest, {\n      open: this.props.singleRoom.showCreateGuest,\n      openNotif: this.props.openNotification,\n      roomCode: roomCode,\n      closeForm: this.props.closeCreateGuest,\n      setcurrentUsername: this.props.setcurrentUsername,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  singleRoom: state.singleRoom\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getSingleRoom: code => dispatch(getSingleRoom(code)),\n  openNotification: (messages, severity) => dispatch(openNotification(messages, severity)),\n  openCreateGuest: () => dispatch(openCreateGuest()),\n  closeCreateGuest: () => dispatch(closeCreateGuest()),\n  setcurrentUsername: username => dispatch(setcurrentUsername(username))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleRoomContainer);","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Room/SingleRoom/SingleRoomContainer.jsx"],"names":["Container","React","Component","connect","SingleRoom","getSingleRoom","openCreateGuest","closeCreateGuest","setcurrentUsername","openNotification","MessageContainer","isLogged","getUsername","CreateGuest","SingleRoomContainer","componentDidMount","console","log","props","location","state","match","params","code","then","username","render","roomCode","singleRoom","minHeight","marginTop","currentUsername","showCreateGuest","mapStateToProps","mapDispatchToProps","dispatch","messages","severity"],"mappings":"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","sourcesContent":["import { Container } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport SingleRoom from \"../SingleRoom/SingleRoom\";\r\nimport { getSingleRoom, openCreateGuest, closeCreateGuest, setcurrentUsername } from \"../SingleRoom/singleRoomActions\";\r\nimport { openNotification } from \"../../Notification/notificationActions\";\r\nimport MessageContainer from \"../../Message/MessageContainer\";\r\nimport { isLogged, getUsername } from \"../../Auth/authService\";\r\nimport CreateGuest from \"./CreateGuest\";\r\n\r\nclass SingleRoomContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.location.state);\r\n        // Get Room data\r\n        this.props.getSingleRoom(this.props.match.params.code);\r\n\r\n        // If user is logged (the speaker of the room), Set id of the logged user in the component state\r\n        if (isLogged()) {\r\n            console.log(\"is logged\");\r\n            getUsername().then((username) => {\r\n                console.log(username);\r\n                username ? this.props.setcurrentUsername(username) : console.log(\"current username not found\");;\r\n            })\r\n        } else {\r\n            // else create a guest for this room\r\n            this.props.openCreateGuest();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const roomCode = this.props.match.params.code\r\n\r\n        console.log(this.props.singleRoom);\r\n\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"md\" style={{ minHeight: `calc(100vh - 150px)`, marginTop: 150}}>\r\n                <SingleRoom singleRoom={this.props.singleRoom} />\r\n                <MessageContainer roomCode={roomCode} username={this.props.singleRoom.currentUsername} />\r\n                <CreateGuest open={this.props.singleRoom.showCreateGuest} openNotif={this.props.openNotification} roomCode={roomCode} closeForm={this.props.closeCreateGuest} setcurrentUsername={this.props.setcurrentUsername} />\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ singleRoom: state.singleRoom })\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getSingleRoom: (code) => dispatch(getSingleRoom(code)),\r\n    openNotification: (messages, severity) => dispatch(openNotification(messages, severity)),\r\n    openCreateGuest: () => dispatch(openCreateGuest()),\r\n    closeCreateGuest: () => dispatch(closeCreateGuest()),\r\n    setcurrentUsername: (username) => dispatch(setcurrentUsername(username)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleRoomContainer);"]},"metadata":{},"sourceType":"module"}