{"ast":null,"code":"import { GET_CHAT_PAGE_SUCCESS, GET_CHAT_PAGE_ERROR, OPEN_UPDATE_CHAT, CLOSE_UPDATE_CHAT, FETCH_MORE_CHATS_SUCCESS, FETCH_MORE_CHATS_ERROR } from \"./chatActionsTypes\";\nimport axios from \"axios\";\nimport listServerErrors from \"../../global/functions/listServerErrors\";\nimport { getTokenFromLocalStorage } from '../../Auth/authService';\nimport { openNotification } from \"../../Notification/notificationActions\"; // Create chat Actions\n// This function create a new chat and show a notification in case of success or error\n\nexport function createChat(chat) {\n  return async dispatch => {\n    const chatJson = JSON.stringify(chat);\n\n    try {\n      // Get token from local storage\n      const accessToken = getTokenFromLocalStorage(\"access_token\"); // Request API to create the new chat\n\n      await axios.post(\"http://localhost:8081/api/chats\", chatJson, {\n        headers: {\n          'Content-Type': 'application/json',\n          \"Authorization\": `Bearer ${accessToken}`\n        }\n      }); // Show success notification\n\n      dispatch(openNotification(\"chat crée avec succès\", \"success\")); // Reload chat list\n\n      dispatch(getChatPage(0));\n      return true;\n    } catch (error) {\n      const statusCode = error.response.status;\n      const data = error.response.data; // Extract errors messages from response        \n\n      const errorMessages = listServerErrors(statusCode, data); // Show errors in notification\n\n      dispatch(openNotification(errorMessages, \"error\"));\n      return false;\n    }\n  };\n} // Delete chat Action\n\nexport function deleteChat(chatId) {\n  console.log(chatId);\n  return async dispatch => {\n    try {\n      const accessToken = getTokenFromLocalStorage(\"access_token\");\n      const config = {\n        headers: {\n          \"Authorization\": `Bearer ${accessToken}`\n        }\n      };\n      await axios.delete(`http://localhost:8081/api/chats/${chatId}`, config);\n      dispatch(openNotification(\"chat supprimé avec succès\", \"success\"));\n      dispatch(getChatPage(0));\n      return true;\n    } catch (error) {\n      dispatch(openNotification(\"La suppression du chat a échoué\", \"error\"));\n      return false;\n    }\n  };\n} // Get chat List Page Action\n\nexport function getChatPageSuccess(pageNumber, chatPage, totalPages) {\n  return {\n    type: GET_CHAT_PAGE_SUCCESS,\n    chatPage: chatPage,\n    pageNumber: pageNumber,\n    totalPages: totalPages\n  };\n}\nexport function getChatPageError() {\n  return {\n    type: GET_CHAT_PAGE_ERROR,\n    errorMsg: \"Une erreur est survenue\"\n  };\n}\nexport function getChatPage(pageNumber) {\n  console.log(\"getChatPage called with page number : \" + pageNumber);\n  return async dispatch => {\n    try {\n      const accessToken = getTokenFromLocalStorage(\"access_token\");\n      const config = {\n        headers: {\n          \"Authorization\": `Bearer ${accessToken}`\n        }\n      };\n      const pageSize = 5;\n      const response = await axios.get(`http://localhost:8081/api/chats?page=${pageNumber}&size=${pageSize}`, config);\n      const chatPage = response.data.content;\n      const totalPages = response.data.totalPages;\n      const last = response.data.last;\n      dispatch(getChatPageSuccess(pageNumber, chatPage, totalPages, last));\n    } catch {\n      dispatch(getChatPageError());\n    }\n  };\n} // Actions for update chat\n\nexport function openUpdateChat(chat) {\n  return {\n    type: OPEN_UPDATE_CHAT,\n    open: true,\n    chat: chat\n  };\n}\nexport function closeUpdateChat() {\n  return {\n    type: CLOSE_UPDATE_CHAT,\n    open: false,\n    chat: null\n  };\n}\nexport function updateChat(chat) {\n  return async dispatch => {\n    const chatJson = JSON.stringify(chat);\n\n    try {\n      const accessToken = getTokenFromLocalStorage(\"access_token\");\n      await axios.put(`http://localhost:8081/api/chats/${chat.id}`, chatJson, {\n        headers: {\n          'Content-Type': 'application/json',\n          \"Authorization\": `Bearer ${accessToken}`\n        }\n      });\n      dispatch(openNotification(\"chat modifié avec succès\", \"success\"));\n      dispatch(closeUpdateChat());\n      dispatch(getChatPage(0));\n      return true;\n    } catch (error) {\n      const statusCode = error.response.status;\n      const data = error.response.data;\n      const errorMessages = listServerErrors(statusCode, data);\n      dispatch(openNotification(errorMessages, \"error\"));\n      return false;\n    }\n  };\n} // Fetch more chats action\n\nexport function fetchMoreChatsSuccess(pageNumber, chatPage, totalPages, last) {\n  return {\n    type: FETCH_MORE_CHATS_SUCCESS,\n    chatPage: chatPage,\n    pageNumber: pageNumber,\n    totalPages: totalPages,\n    last: last\n  };\n}\nexport function fetchMoreChatsError() {\n  return {\n    type: FETCH_MORE_CHATS_ERROR,\n    errorMsg: \"Une erreur est survenue\"\n  };\n}\nexport function fetchMoreChats(pageNumber) {\n  return async dispatch => {\n    try {\n      const accessToken = getTokenFromLocalStorage(\"access_token\");\n      const config = {\n        headers: {\n          \"Authorization\": `Bearer ${accessToken}`\n        }\n      };\n      const pageSize = 5;\n      const response = await axios.get(`http://localhost:8081/api/chats?page=${pageNumber}&size=${pageSize}`, config);\n      const chatPage = response.data.content;\n      const totalPages = response.data.totalPages;\n      const last = response.data.last;\n      dispatch(fetchMoreChatsSuccess(pageNumber, chatPage, totalPages, last));\n    } catch {\n      dispatch(fetchMoreChatsError());\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Chat/redux/chatActions.js"],"names":["GET_CHAT_PAGE_SUCCESS","GET_CHAT_PAGE_ERROR","OPEN_UPDATE_CHAT","CLOSE_UPDATE_CHAT","FETCH_MORE_CHATS_SUCCESS","FETCH_MORE_CHATS_ERROR","axios","listServerErrors","getTokenFromLocalStorage","openNotification","createChat","chat","dispatch","chatJson","JSON","stringify","accessToken","post","headers","getChatPage","error","statusCode","response","status","data","errorMessages","deleteChat","chatId","console","log","config","delete","getChatPageSuccess","pageNumber","chatPage","totalPages","type","getChatPageError","errorMsg","pageSize","get","content","last","openUpdateChat","open","closeUpdateChat","updateChat","put","id","fetchMoreChatsSuccess","fetchMoreChatsError","fetchMoreChats"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,mBAAhC,EAAqDC,gBAArD,EAAuEC,iBAAvE,EAA0FC,wBAA1F,EAAoHC,sBAApH,QAAkJ,oBAAlJ;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,yCAA7B;AACA,SAASC,wBAAT,QAAyC,wBAAzC;AACA,SAASC,gBAAT,QAAiC,wCAAjC,C,CAEA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAE7B,SAAO,MAAOC,QAAP,IAAoB;AAEvB,UAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAjB;;AAEA,QAAI;AACA;AACA,YAAMK,WAAW,GAAGR,wBAAwB,CAAC,cAAD,CAA5C,CAFA,CAGA;;AACA,YAAMF,KAAK,CAACW,IAAN,CACF,iCADE,EAEFJ,QAFE,EAGF;AAAEK,QAAAA,OAAO,EAAE;AAAE,0BAAgB,kBAAlB;AAAsC,2BAAkB,UAASF,WAAY;AAA7E;AAAX,OAHE,CAAN,CAJA,CASA;;AACAJ,MAAAA,QAAQ,CAACH,gBAAgB,CAAC,uBAAD,EAA0B,SAA1B,CAAjB,CAAR,CAVA,CAWA;;AACAG,MAAAA,QAAQ,CAACO,WAAW,CAAC,CAAD,CAAZ,CAAR;AACA,aAAO,IAAP;AACH,KAdD,CAcE,OAAOC,KAAP,EAAc;AACZ,YAAMC,UAAU,GAAGD,KAAK,CAACE,QAAN,CAAeC,MAAlC;AACA,YAAMC,IAAI,GAAGJ,KAAK,CAACE,QAAN,CAAeE,IAA5B,CAFY,CAGZ;;AACA,YAAMC,aAAa,GAAGlB,gBAAgB,CAACc,UAAD,EAAaG,IAAb,CAAtC,CAJY,CAKZ;;AACAZ,MAAAA,QAAQ,CAACH,gBAAgB,CAACgB,aAAD,EAAgB,OAAhB,CAAjB,CAAR;AACA,aAAO,KAAP;AACH;AACJ,GA3BD;AA4BH,C,CAED;;AACA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAO,MAAOf,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMI,WAAW,GAAGR,wBAAwB,CAAC,cAAD,CAA5C;AACA,YAAMsB,MAAM,GAAG;AACXZ,QAAAA,OAAO,EAAE;AACL,2BAAkB,UAASF,WAAY;AADlC;AADE,OAAf;AAKA,YAAMV,KAAK,CAACyB,MAAN,CAAc,mCAAkCJ,MAAO,EAAvD,EAA0DG,MAA1D,CAAN;AACAlB,MAAAA,QAAQ,CAACH,gBAAgB,CAAC,2BAAD,EAA8B,SAA9B,CAAjB,CAAR;AACAG,MAAAA,QAAQ,CAACO,WAAW,CAAC,CAAD,CAAZ,CAAR;AACA,aAAO,IAAP;AACH,KAXD,CAWE,OAAOC,KAAP,EAAc;AACZR,MAAAA,QAAQ,CAACH,gBAAgB,CAAC,iCAAD,EAAoC,OAApC,CAAjB,CAAR;AACA,aAAO,KAAP;AACH;AACJ,GAhBD;AAiBH,C,CAED;;AACA,OAAO,SAASuB,kBAAT,CAA4BC,UAA5B,EAAwCC,QAAxC,EAAkDC,UAAlD,EAA8D;AACjE,SAAO;AACHC,IAAAA,IAAI,EAAEpC,qBADH;AAEHkC,IAAAA,QAAQ,EAAEA,QAFP;AAGHD,IAAAA,UAAU,EAAEA,UAHT;AAIHE,IAAAA,UAAU,EAAEA;AAJT,GAAP;AAMH;AAED,OAAO,SAASE,gBAAT,GAA4B;AAC/B,SAAO;AACHD,IAAAA,IAAI,EAAEnC,mBADH;AAEHqC,IAAAA,QAAQ,EAAE;AAFP,GAAP;AAIH;AAED,OAAO,SAASnB,WAAT,CAAqBc,UAArB,EAAiC;AACpCL,EAAAA,OAAO,CAACC,GAAR,CAAY,2CAA2CI,UAAvD;AACA,SAAO,MAAOrB,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMI,WAAW,GAAGR,wBAAwB,CAAC,cAAD,CAA5C;AACA,YAAMsB,MAAM,GAAG;AACXZ,QAAAA,OAAO,EAAE;AACL,2BAAkB,UAASF,WAAY;AADlC;AADE,OAAf;AAKA,YAAMuB,QAAQ,GAAG,CAAjB;AACA,YAAMjB,QAAQ,GAAG,MAAMhB,KAAK,CAACkC,GAAN,CAAW,wCAAuCP,UAAW,SAAQM,QAAS,EAA9E,EAAiFT,MAAjF,CAAvB;AACA,YAAMI,QAAQ,GAAGZ,QAAQ,CAACE,IAAT,CAAciB,OAA/B;AACA,YAAMN,UAAU,GAAGb,QAAQ,CAACE,IAAT,CAAcW,UAAjC;AACA,YAAMO,IAAI,GAAGpB,QAAQ,CAACE,IAAT,CAAckB,IAA3B;AACA9B,MAAAA,QAAQ,CAACoB,kBAAkB,CAACC,UAAD,EAAaC,QAAb,EAAuBC,UAAvB,EAAmCO,IAAnC,CAAnB,CAAR;AACH,KAbD,CAaE,MAAM;AACJ9B,MAAAA,QAAQ,CAACyB,gBAAgB,EAAjB,CAAR;AACH;AACJ,GAjBD;AAkBH,C,CAED;;AACA,OAAO,SAASM,cAAT,CAAwBhC,IAAxB,EAA8B;AACjC,SAAO;AACHyB,IAAAA,IAAI,EAAElC,gBADH;AAEH0C,IAAAA,IAAI,EAAE,IAFH;AAGHjC,IAAAA,IAAI,EAAEA;AAHH,GAAP;AAKH;AAED,OAAO,SAASkC,eAAT,GAA2B;AAC9B,SAAO;AACHT,IAAAA,IAAI,EAAEjC,iBADH;AAEHyC,IAAAA,IAAI,EAAE,KAFH;AAGHjC,IAAAA,IAAI,EAAE;AAHH,GAAP;AAKH;AAED,OAAO,SAASmC,UAAT,CAAoBnC,IAApB,EAA0B;AAC7B,SAAO,MAAOC,QAAP,IAAoB;AAEvB,UAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAjB;;AAEA,QAAI;AACA,YAAMK,WAAW,GAAGR,wBAAwB,CAAC,cAAD,CAA5C;AACA,YAAMF,KAAK,CAACyC,GAAN,CACD,mCAAkCpC,IAAI,CAACqC,EAAG,EADzC,EAEFnC,QAFE,EAGF;AAAEK,QAAAA,OAAO,EAAE;AAAE,0BAAgB,kBAAlB;AAAsC,2BAAkB,UAASF,WAAY;AAA7E;AAAX,OAHE,CAAN;AAMAJ,MAAAA,QAAQ,CAACH,gBAAgB,CAAC,0BAAD,EAA6B,SAA7B,CAAjB,CAAR;AACAG,MAAAA,QAAQ,CAACiC,eAAe,EAAhB,CAAR;AACAjC,MAAAA,QAAQ,CAACO,WAAW,CAAC,CAAD,CAAZ,CAAR;AACA,aAAO,IAAP;AACH,KAZD,CAYE,OAAOC,KAAP,EAAc;AACZ,YAAMC,UAAU,GAAGD,KAAK,CAACE,QAAN,CAAeC,MAAlC;AACA,YAAMC,IAAI,GAAGJ,KAAK,CAACE,QAAN,CAAeE,IAA5B;AACA,YAAMC,aAAa,GAAGlB,gBAAgB,CAACc,UAAD,EAAaG,IAAb,CAAtC;AACAZ,MAAAA,QAAQ,CAACH,gBAAgB,CAACgB,aAAD,EAAgB,OAAhB,CAAjB,CAAR;AACA,aAAO,KAAP;AACH;AACJ,GAvBD;AAwBH,C,CAED;;AACA,OAAO,SAASwB,qBAAT,CAA+BhB,UAA/B,EAA2CC,QAA3C,EAAqDC,UAArD,EAAiEO,IAAjE,EAAuE;AAC1E,SAAO;AACHN,IAAAA,IAAI,EAAEhC,wBADH;AAEH8B,IAAAA,QAAQ,EAAEA,QAFP;AAGHD,IAAAA,UAAU,EAAEA,UAHT;AAIHE,IAAAA,UAAU,EAAEA,UAJT;AAKHO,IAAAA,IAAI,EAAEA;AALH,GAAP;AAOH;AAED,OAAO,SAASQ,mBAAT,GAA+B;AAClC,SAAO;AACHd,IAAAA,IAAI,EAAE/B,sBADH;AAEHiC,IAAAA,QAAQ,EAAE;AAFP,GAAP;AAIH;AAED,OAAO,SAASa,cAAT,CAAwBlB,UAAxB,EAAoC;AACvC,SAAO,MAAOrB,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMI,WAAW,GAAGR,wBAAwB,CAAC,cAAD,CAA5C;AACA,YAAMsB,MAAM,GAAG;AACXZ,QAAAA,OAAO,EAAE;AACL,2BAAkB,UAASF,WAAY;AADlC;AADE,OAAf;AAKA,YAAMuB,QAAQ,GAAG,CAAjB;AACA,YAAMjB,QAAQ,GAAG,MAAMhB,KAAK,CAACkC,GAAN,CAAW,wCAAuCP,UAAW,SAAQM,QAAS,EAA9E,EAAiFT,MAAjF,CAAvB;AACA,YAAMI,QAAQ,GAAGZ,QAAQ,CAACE,IAAT,CAAciB,OAA/B;AACA,YAAMN,UAAU,GAAGb,QAAQ,CAACE,IAAT,CAAcW,UAAjC;AACA,YAAMO,IAAI,GAAGpB,QAAQ,CAACE,IAAT,CAAckB,IAA3B;AACA9B,MAAAA,QAAQ,CAACqC,qBAAqB,CAAChB,UAAD,EAAaC,QAAb,EAAuBC,UAAvB,EAAmCO,IAAnC,CAAtB,CAAR;AACH,KAbD,CAaE,MAAM;AACJ9B,MAAAA,QAAQ,CAACsC,mBAAmB,EAApB,CAAR;AACH;AACJ,GAjBD;AAkBH","sourcesContent":["import { GET_CHAT_PAGE_SUCCESS, GET_CHAT_PAGE_ERROR, OPEN_UPDATE_CHAT, CLOSE_UPDATE_CHAT, FETCH_MORE_CHATS_SUCCESS, FETCH_MORE_CHATS_ERROR } from \"./chatActionsTypes\"\r\nimport axios from \"axios\";\r\nimport listServerErrors from \"../../global/functions/listServerErrors\";\r\nimport { getTokenFromLocalStorage } from '../../Auth/authService';\r\nimport { openNotification } from \"../../Notification/notificationActions\";\r\n\r\n// Create chat Actions\r\n// This function create a new chat and show a notification in case of success or error\r\nexport function createChat(chat) {\r\n    \r\n    return async (dispatch) => {\r\n        \r\n        const chatJson = JSON.stringify(chat);\r\n\r\n        try {\r\n            // Get token from local storage\r\n            const accessToken = getTokenFromLocalStorage(\"access_token\");\r\n            // Request API to create the new chat\r\n            await axios.post(\r\n                \"http://localhost:8081/api/chats\",\r\n                chatJson,\r\n                { headers: { 'Content-Type': 'application/json', \"Authorization\": `Bearer ${accessToken}` } }\r\n            )\r\n            // Show success notification\r\n            dispatch(openNotification(\"chat crée avec succès\", \"success\"));\r\n            // Reload chat list\r\n            dispatch(getChatPage(0));\r\n            return true\r\n        } catch (error) {\r\n            const statusCode = error.response.status\r\n            const data = error.response.data\r\n            // Extract errors messages from response        \r\n            const errorMessages = listServerErrors(statusCode, data);\r\n            // Show errors in notification\r\n            dispatch(openNotification(errorMessages, \"error\"))\r\n            return false\r\n        }\r\n    }\r\n}\r\n\r\n// Delete chat Action\r\nexport function deleteChat(chatId) {\r\n    console.log(chatId);\r\n    return async (dispatch) => {\r\n        try {\r\n            const accessToken = getTokenFromLocalStorage(\"access_token\");\r\n            const config = {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${accessToken}`\r\n                }\r\n            }\r\n            await axios.delete(`http://localhost:8081/api/chats/${chatId}`, config);\r\n            dispatch(openNotification(\"chat supprimé avec succès\", \"success\"))\r\n            dispatch(getChatPage(0))\r\n            return true\r\n        } catch (error) {\r\n            dispatch(openNotification(\"La suppression du chat a échoué\", \"error\"))\r\n            return false           \r\n        }\r\n    }\r\n}\r\n\r\n// Get chat List Page Action\r\nexport function getChatPageSuccess(pageNumber, chatPage, totalPages) {\r\n    return {\r\n        type: GET_CHAT_PAGE_SUCCESS,\r\n        chatPage: chatPage,\r\n        pageNumber: pageNumber,\r\n        totalPages: totalPages\r\n    }\r\n}\r\n\r\nexport function getChatPageError() {\r\n    return {\r\n        type: GET_CHAT_PAGE_ERROR,\r\n        errorMsg: \"Une erreur est survenue\"\r\n    }\r\n}\r\n\r\nexport function getChatPage(pageNumber) {\r\n    console.log(\"getChatPage called with page number : \" + pageNumber);\r\n    return async (dispatch) => {\r\n        try {\r\n            const accessToken = getTokenFromLocalStorage(\"access_token\");\r\n            const config = {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${accessToken}`\r\n                }\r\n            }\r\n            const pageSize = 5;\r\n            const response = await axios.get(`http://localhost:8081/api/chats?page=${pageNumber}&size=${pageSize}`, config);\r\n            const chatPage = response.data.content;\r\n            const totalPages = response.data.totalPages;\r\n            const last = response.data.last\r\n            dispatch(getChatPageSuccess(pageNumber, chatPage, totalPages, last))\r\n        } catch {           \r\n            dispatch(getChatPageError());\r\n        }\r\n    }\r\n}\r\n\r\n// Actions for update chat\r\nexport function openUpdateChat(chat) {\r\n    return {\r\n        type: OPEN_UPDATE_CHAT,\r\n        open: true,\r\n        chat: chat\r\n    }\r\n}\r\n\r\nexport function closeUpdateChat() {\r\n    return {\r\n        type: CLOSE_UPDATE_CHAT,\r\n        open: false,\r\n        chat: null\r\n    }\r\n}\r\n\r\nexport function updateChat(chat) {\r\n    return async (dispatch) => {\r\n\r\n        const chatJson = JSON.stringify(chat);\r\n\r\n        try {\r\n            const accessToken = getTokenFromLocalStorage(\"access_token\");\r\n            await axios.put(\r\n                `http://localhost:8081/api/chats/${chat.id}`,\r\n                chatJson,\r\n                { headers: { 'Content-Type': 'application/json', \"Authorization\": `Bearer ${accessToken}` } }\r\n            )\r\n\r\n            dispatch(openNotification(\"chat modifié avec succès\", \"success\"))\r\n            dispatch(closeUpdateChat());\r\n            dispatch(getChatPage(0));\r\n            return true\r\n        } catch (error) {\r\n            const statusCode = error.response.status\r\n            const data = error.response.data            \r\n            const errorMessages = listServerErrors(statusCode, data);\r\n            dispatch(openNotification(errorMessages, \"error\"))\r\n            return false\r\n        }\r\n    }\r\n}\r\n\r\n// Fetch more chats action\r\nexport function fetchMoreChatsSuccess(pageNumber, chatPage, totalPages, last) {\r\n    return {\r\n        type: FETCH_MORE_CHATS_SUCCESS,\r\n        chatPage: chatPage,\r\n        pageNumber: pageNumber,\r\n        totalPages: totalPages,\r\n        last: last\r\n    }\r\n}\r\n\r\nexport function fetchMoreChatsError() {\r\n    return {\r\n        type: FETCH_MORE_CHATS_ERROR,\r\n        errorMsg: \"Une erreur est survenue\"\r\n    }\r\n}\r\n\r\nexport function fetchMoreChats(pageNumber) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const accessToken = getTokenFromLocalStorage(\"access_token\");\r\n            const config = {\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${accessToken}`\r\n                }\r\n            }\r\n            const pageSize = 5;\r\n            const response = await axios.get(`http://localhost:8081/api/chats?page=${pageNumber}&size=${pageSize}`, config);\r\n            const chatPage = response.data.content;\r\n            const totalPages = response.data.totalPages;\r\n            const last = response.data.last\r\n            dispatch(fetchMoreChatsSuccess(pageNumber, chatPage, totalPages, last))\r\n        } catch {           \r\n            dispatch(fetchMoreChatsError());\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}