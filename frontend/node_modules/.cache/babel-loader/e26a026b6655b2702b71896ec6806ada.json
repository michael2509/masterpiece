{"ast":null,"code":"import axios from 'axios';\nexport function isLogged() {\n  let logged = null;\n  const access_token = getTokenFromLocalStorage(\"access_token\");\n  access_token ? logged = true : logged = false;\n  return logged;\n}\nexport async function login(username, password) {\n  const clientId = process.env.REACT_APP_CLIENT_ID;\n  const grantType = process.env.REACT_APP_GRANT_TYPE;\n\n  try {\n    const response = await axios.post(`http://localhost:8081/oauth/token?grant_type=${grantType}&username=${username}&password=${password}&client_id=${clientId}`);\n    const accessToken = response.data.access_token;\n    const expiresIn = response.data.expires_in;\n    setTokenInLocalStorage(\"access_token\", accessToken, expiresIn);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\nexport function logout() {\n  localStorage.removeItem(\"access_token\");\n}\n\nfunction setTokenInLocalStorage(tokenKey, tokenValue, expiresIn) {\n  const now = new Date();\n  const expiresInMls = expiresIn * 1000;\n  const token = {\n    value: tokenValue,\n    expiry: now.getTime() + expiresInMls\n  };\n  localStorage.setItem(tokenKey, JSON.stringify(token));\n}\n\nexport function getTokenFromLocalStorage(tokenKey) {\n  const tokenStr = localStorage.getItem(tokenKey); // if the item doesn't exist, return null\n\n  if (!tokenStr) {\n    return null;\n  }\n\n  const token = JSON.parse(tokenStr);\n  const now = new Date(); // compare the expiry time of the token with the current time\n\n  if (now.getTime() > token.expiry) {\n    // If the token is expired, delete the token from storage\n    // and return null\n    localStorage.removeItem(tokenKey);\n    return null;\n  }\n\n  return token.value;\n}\nexport async function getUsername() {\n  try {\n    const accessToken = getTokenFromLocalStorage(\"access_token\");\n    const response = await axios.get(\"http://localhost:8081/api/users/getusername\", {\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${accessToken}`\n      }\n    });\n    const username = response.data;\n    console.log(username);\n    return username;\n  } catch (error) {\n    console.log(error);\n    return error.response;\n  }\n}","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Auth/authService.js"],"names":["axios","isLogged","logged","access_token","getTokenFromLocalStorage","login","username","password","clientId","process","env","REACT_APP_CLIENT_ID","grantType","REACT_APP_GRANT_TYPE","response","post","accessToken","data","expiresIn","expires_in","setTokenInLocalStorage","error","logout","localStorage","removeItem","tokenKey","tokenValue","now","Date","expiresInMls","token","value","expiry","getTime","setItem","JSON","stringify","tokenStr","getItem","parse","getUsername","get","headers","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,QAAT,GAAoB;AACvB,MAAIC,MAAM,GAAG,IAAb;AACA,QAAMC,YAAY,GAAGC,wBAAwB,CAAC,cAAD,CAA7C;AAEAD,EAAAA,YAAY,GAAGD,MAAM,GAAG,IAAZ,GAAmBA,MAAM,GAAG,KAAxC;AAEA,SAAOA,MAAP;AACH;AAED,OAAO,eAAeG,KAAf,CAAqBC,QAArB,EAA+BC,QAA/B,EAAyC;AACxC,QAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAA7B;AACA,QAAMC,SAAS,GAAGH,OAAO,CAACC,GAAR,CAAYG,oBAA9B;;AAEA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAY,gDAA+CH,SAAU,aAAYN,QAAS,aAAYC,QAAS,cAAaC,QAAS,EAArI,CAAvB;AACA,UAAMQ,WAAW,GAAGF,QAAQ,CAACG,IAAT,CAAcd,YAAlC;AACA,UAAMe,SAAS,GAAGJ,QAAQ,CAACG,IAAT,CAAcE,UAAhC;AACAC,IAAAA,sBAAsB,CAAC,cAAD,EAAiBJ,WAAjB,EAA8BE,SAA9B,CAAtB;AACA,WAAO,IAAP;AACH,GAND,CAME,OAAOG,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACR;AAED,OAAO,SAASC,MAAT,GAAkB;AACrBC,EAAAA,YAAY,CAACC,UAAb,CAAwB,cAAxB;AACH;;AAED,SAASJ,sBAAT,CAAgCK,QAAhC,EAA0CC,UAA1C,EAAsDR,SAAtD,EAAiE;AAC7D,QAAMS,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,QAAMC,YAAY,GAAGX,SAAS,GAAG,IAAjC;AAEA,QAAMY,KAAK,GAAG;AACVC,IAAAA,KAAK,EAAEL,UADG;AAEVM,IAAAA,MAAM,EAAEL,GAAG,CAACM,OAAJ,KAAgBJ;AAFd,GAAd;AAKAN,EAAAA,YAAY,CAACW,OAAb,CAAqBT,QAArB,EAA+BU,IAAI,CAACC,SAAL,CAAeN,KAAf,CAA/B;AACH;;AAED,OAAO,SAAS1B,wBAAT,CAAkCqB,QAAlC,EAA4C;AAClD,QAAMY,QAAQ,GAAGd,YAAY,CAACe,OAAb,CAAqBb,QAArB,CAAjB,CADkD,CAElD;;AACA,MAAI,CAACY,QAAL,EAAe;AACd,WAAO,IAAP;AACA;;AACD,QAAMP,KAAK,GAAGK,IAAI,CAACI,KAAL,CAAWF,QAAX,CAAd;AACA,QAAMV,GAAG,GAAG,IAAIC,IAAJ,EAAZ,CAPkD,CAQlD;;AACA,MAAID,GAAG,CAACM,OAAJ,KAAgBH,KAAK,CAACE,MAA1B,EAAkC;AACjC;AACA;AACAT,IAAAA,YAAY,CAACC,UAAb,CAAwBC,QAAxB;AACA,WAAO,IAAP;AACG;;AAEJ,SAAOK,KAAK,CAACC,KAAb;AACA;AAED,OAAO,eAAeS,WAAf,GAA6B;AAChC,MAAI;AACA,UAAMxB,WAAW,GAAGZ,wBAAwB,CAAC,cAAD,CAA5C;AACA,UAAMU,QAAQ,GAAG,MAAMd,KAAK,CAACyC,GAAN,CACnB,6CADmB,EAEnB;AAAEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB,kBAAlB;AAAsC,yBAAkB,UAAS1B,WAAY;AAA7E;AAAX,KAFmB,CAAvB;AAIA,UAAMV,QAAQ,GAAGQ,QAAQ,CAACG,IAA1B;AACA0B,IAAAA,OAAO,CAACC,GAAR,CAAYtC,QAAZ;AACA,WAAOA,QAAP;AACH,GATD,CASE,OAAOe,KAAP,EAAc;AACZsB,IAAAA,OAAO,CAACC,GAAR,CAAYvB,KAAZ;AACA,WAAOA,KAAK,CAACP,QAAb;AACH;AACJ","sourcesContent":["import axios from 'axios';\r\n\r\nexport function isLogged() {\r\n    let logged = null;\r\n    const access_token = getTokenFromLocalStorage(\"access_token\");\r\n\r\n    access_token ? logged = true : logged = false;\r\n\r\n    return logged;\r\n}\r\n\r\nexport async function login(username, password) {\r\n        const clientId = process.env.REACT_APP_CLIENT_ID\r\n        const grantType = process.env.REACT_APP_GRANT_TYPE\r\n      \r\n        try {\r\n            const response = await axios.post(`http://localhost:8081/oauth/token?grant_type=${grantType}&username=${username}&password=${password}&client_id=${clientId}`)\r\n            const accessToken = response.data.access_token\r\n            const expiresIn = response.data.expires_in\r\n            setTokenInLocalStorage(\"access_token\", accessToken, expiresIn)\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n}\r\n\r\nexport function logout() {\r\n    localStorage.removeItem(\"access_token\");\r\n}\r\n\r\nfunction setTokenInLocalStorage(tokenKey, tokenValue, expiresIn) {\r\n    const now = new Date();\r\n    const expiresInMls = expiresIn * 1000;\r\n\r\n    const token = {\r\n        value: tokenValue,\r\n        expiry: now.getTime() + expiresInMls\r\n    }\r\n\r\n    localStorage.setItem(tokenKey, JSON.stringify(token))\r\n}\r\n\r\nexport function getTokenFromLocalStorage(tokenKey) {\r\n\tconst tokenStr = localStorage.getItem(tokenKey)\r\n\t// if the item doesn't exist, return null\r\n\tif (!tokenStr) {\r\n\t\treturn null\r\n\t}\r\n\tconst token = JSON.parse(tokenStr)\r\n\tconst now = new Date()\r\n\t// compare the expiry time of the token with the current time\r\n\tif (now.getTime() > token.expiry) {\r\n\t\t// If the token is expired, delete the token from storage\r\n\t\t// and return null\r\n\t\tlocalStorage.removeItem(tokenKey)\r\n\t\treturn null\r\n    }\r\n\r\n\treturn token.value\r\n}\r\n\r\nexport async function getUsername() {        \r\n    try {\r\n        const accessToken = getTokenFromLocalStorage(\"access_token\")\r\n        const response = await axios.get(\r\n            \"http://localhost:8081/api/users/getusername\",\r\n            { headers: { 'Content-Type': 'application/json', \"Authorization\": `Bearer ${accessToken}` } }\r\n        )\r\n        const username = response.data;\r\n        console.log(username);\r\n        return username;\r\n    } catch (error) {\r\n        console.log(error);\r\n        return error.response;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}