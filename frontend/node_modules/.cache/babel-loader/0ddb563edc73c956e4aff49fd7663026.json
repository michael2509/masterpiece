{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\src\\\\Message\\\\MessageContainer.jsx\";\nimport React, { Component, Fragment, createRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport MessageList from \"./MessageList\";\nimport AddMessage from \"./AddMessage\";\nimport SockJsClient from 'react-stomp';\nimport { addMessage, getMessageList } from \"./messageActions\";\nimport listServerErrors from \"../global/functions/listServerErrors\";\nimport { openNotification } from \"../Notification/notificationActions\";\nimport { withRouter } from \"react-router-dom\"; // Message container to connect to app state using redux\n\nclass MessageContainer extends Component {\n  constructor() {\n    super();\n    this.sockJsClient = createRef();\n  }\n\n  componentDidMount() {\n    // Get chat's messages\n    console.log(\"component did mount\");\n    this.props.getMessageList(this.props.chat.id);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.chat.id !== this.props.chat.id) {\n      console.log(\"component did update\");\n      this.props.getMessageList(this.props.chat.id);\n    }\n  }\n\n  handleMessage(response, topic) {\n    const body = response.body,\n          statusCode = response.statusCode,\n          statusCodeValue = response.statusCodeValue;\n    console.log(body); // Message received with success\n\n    if (statusCode === \"OK\" && body !== null) {\n      this.props.addMessage(body.senderName, body.text);\n    } // Show success notif if message sent with success\n\n\n    if (topic === \"/user/queue/success\") {\n      this.props.openNotification(\"Message envoyé\", \"success\");\n    } // Show error notif if message sending failed\n\n\n    if (topic === \"/user/queue/errors\") {\n      console.log(response);\n      const errorsMsg = listServerErrors(statusCodeValue, body);\n      this.props.openNotification(errorsMsg, \"error\");\n    }\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(MessageList, {\n      messages: this.props.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(AddMessage, {\n      chatId: this.props.chat.id,\n      senderName: this.props.chat.senderName,\n      senderType: this.props.chat.senderType,\n      sockJsClient: this.sockJsClient.current,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(SockJsClient, {\n      url: \"http://localhost:8081/websocket-chat/\",\n      topics: ['/topic/user', \"/user/queue/errors\", \"/user/queue/success\"],\n      onConnect: () => {\n        console.log(\"connected\");\n      },\n      onDisconnect: () => {\n        console.log(\"Disconnected\");\n      },\n      onMessage: (response, topic) => this.handleMessage(response, topic),\n      ref: this.sockJsClient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n  }\n\n} // Part of the app state to retrieve\n\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n  chat: state.SingleChat\n}); // Actions to retrieve\n\n\nconst mapDispatchToProps = dispatch => ({\n  getMessageList: chatId => dispatch(getMessageList(chatId)),\n  addMessage: (username, message) => dispatch(addMessage(username, message)),\n  openNotification: (messages, severity) => dispatch(openNotification(messages, severity))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(MessageContainer));","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Message/MessageContainer.jsx"],"names":["React","Component","Fragment","createRef","connect","MessageList","AddMessage","SockJsClient","addMessage","getMessageList","listServerErrors","openNotification","withRouter","MessageContainer","constructor","sockJsClient","componentDidMount","console","log","props","chat","id","componentDidUpdate","prevProps","handleMessage","response","topic","body","statusCode","statusCodeValue","senderName","text","errorsMsg","render","messages","senderType","current","mapStateToProps","state","SingleChat","mapDispatchToProps","dispatch","chatId","username","message","severity"],"mappings":"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","sourcesContent":["import React, { Component, Fragment, createRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport MessageList from \"./MessageList\";\r\nimport AddMessage from \"./AddMessage\";\r\nimport SockJsClient from 'react-stomp';\r\nimport { addMessage, getMessageList } from \"./messageActions\";\r\nimport listServerErrors from \"../global/functions/listServerErrors\";\r\nimport { openNotification } from \"../Notification/notificationActions\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n// Message container to connect to app state using redux\r\nclass MessageContainer extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.sockJsClient = createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Get chat's messages\r\n        console.log(\"component did mount\");\r\n        this.props.getMessageList(this.props.chat.id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.chat.id !== this.props.chat.id) {\r\n            console.log(\"component did update\");\r\n            this.props.getMessageList(this.props.chat.id);\r\n        }\r\n    }\r\n\r\n    handleMessage(response, topic) {\r\n        const { body, statusCode, statusCodeValue } = response;\r\n\r\n        console.log(body);\r\n\r\n        // Message received with success\r\n        if (statusCode === \"OK\" && body !== null) {\r\n            this.props.addMessage(body.senderName, body.text);\r\n        }\r\n        // Show success notif if message sent with success\r\n        if (topic === \"/user/queue/success\") {\r\n            this.props.openNotification(\"Message envoyé\", \"success\");\r\n        }\r\n        // Show error notif if message sending failed\r\n        if(topic === \"/user/queue/errors\") {\r\n            console.log(response);\r\n            const errorsMsg = listServerErrors(statusCodeValue, body)\r\n            this.props.openNotification(errorsMsg, \"error\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <MessageList messages={this.props.messages} />\r\n                <AddMessage chatId={this.props.chat.id} senderName={this.props.chat.senderName} senderType={this.props.chat.senderType} sockJsClient={this.sockJsClient.current} />\r\n                <SockJsClient\r\n                    url='http://localhost:8081/websocket-chat/'\r\n                    topics={['/topic/user', \"/user/queue/errors\", \"/user/queue/success\"]}\r\n                    onConnect={() => {\r\n                        console.log(\"connected\");\r\n                    }}\r\n                    onDisconnect={() => {\r\n                        console.log(\"Disconnected\");\r\n                    }}\r\n                    onMessage={(response, topic) => this.handleMessage(response, topic)}\r\n                    ref={this.sockJsClient}\r\n                />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n// Part of the app state to retrieve\r\nconst mapStateToProps = (state) => ({\r\n    messages: state.messages,\r\n    chat: state.SingleChat\r\n})\r\n\r\n\r\n// Actions to retrieve\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getMessageList: (chatId) => dispatch(getMessageList(chatId)),\r\n    addMessage: (username, message) => dispatch(addMessage(username, message)),\r\n    openNotification: (messages, severity) => dispatch(openNotification(messages, severity))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(MessageContainer));"]},"metadata":{},"sourceType":"module"}