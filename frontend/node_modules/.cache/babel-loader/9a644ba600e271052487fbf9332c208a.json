{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\micha\\\\Projets\\\\masterpiece\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import{ADD_MESSAGE,GET_MESSAGE_LIST}from\"./messageActionsTypes\";import axios from\"axios\";// Add message action\nexport var addMessage=function addMessage(senderName,text){return{type:ADD_MESSAGE,senderName:senderName,text:text};};// Fetch messages actions\nexport var fetchMessageList=function fetchMessageList(messageList){return{type:GET_MESSAGE_LIST,messageList:messageList};};// Format message list to keep only sender name and text\nvar formatMessages=function formatMessages(messageList){var formattedMessageList=[];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=messageList[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var message=_step.value;var formattedMessage={text:message.text,senderName:null};if(message.speaker!=null){formattedMessage.senderName=message.speaker.username;}if(message.guest!=null){formattedMessage.senderName=message.guest.pseudo;}formattedMessageList.push(formattedMessage);}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return!=null){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}return formattedMessageList;};// Get message list\nexport var getMessageList=function getMessageList(chatId){return function _callee(dispatch){var response,messageList,formattedMsgList;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return _regeneratorRuntime.awrap(axios.get(\"http://localhost:8081/api/messages/chat/\".concat(chatId)));case 3:response=_context.sent;messageList=response.data;console.log(messageList);formattedMsgList=formatMessages(messageList);console.log(\"get message list\");console.log(formattedMsgList);dispatch(fetchMessageList(formattedMsgList));_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);console.log(_context.t0);return _context.abrupt(\"return\",false);case 16:case\"end\":return _context.stop();}}},null,null,[[0,12]]);};};","map":{"version":3,"sources":["C:/Users/micha/Projets/masterpiece/frontend/src/Message/messageActions.js"],"names":["ADD_MESSAGE","GET_MESSAGE_LIST","axios","addMessage","senderName","text","type","fetchMessageList","messageList","formatMessages","formattedMessageList","message","formattedMessage","speaker","username","guest","pseudo","push","getMessageList","chatId","dispatch","get","response","data","console","log","formattedMsgList"],"mappings":"6HAAA,OAASA,WAAT,CAAsBC,gBAAtB,KAA8C,uBAA9C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA;AACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,UAAD,CAAaC,IAAb,QAAuB,CAC7CC,IAAI,CAAEN,WADuC,CAE7CI,UAAU,CAAEA,UAFiC,CAG7CC,IAAI,CAAEA,IAHuC,CAAvB,EAAnB,CAMP;AACA,MAAO,IAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,WAAD,QAAkB,CAC9CF,IAAI,CAAEL,gBADwC,CAE9CO,WAAW,CAAEA,WAFiC,CAAlB,EAAzB,CAKP;AACA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACD,WAAD,CAAiB,CACpC,GAAME,CAAAA,oBAAoB,CAAG,EAA7B,CADoC,gGAGpC,kBAAsBF,WAAtB,oHAAmC,IAAxBG,CAAAA,OAAwB,aAC/B,GAAMC,CAAAA,gBAAgB,CAAG,CAAEP,IAAI,CAAEM,OAAO,CAACN,IAAhB,CAAsBD,UAAU,CAAE,IAAlC,CAAzB,CACA,GAAIO,OAAO,CAACE,OAAR,EAAmB,IAAvB,CAA6B,CACzBD,gBAAgB,CAACR,UAAjB,CAA8BO,OAAO,CAACE,OAAR,CAAgBC,QAA9C,CACH,CACD,GAAIH,OAAO,CAACI,KAAR,EAAiB,IAArB,CAA2B,CACvBH,gBAAgB,CAACR,UAAjB,CAA8BO,OAAO,CAACI,KAAR,CAAcC,MAA5C,CACH,CACDN,oBAAoB,CAACO,IAArB,CAA0BL,gBAA1B,EACH,CAZmC,qMAcpC,MAAOF,CAAAA,oBAAP,CACH,CAfD,CAiBA;AACA,MAAO,IAAMQ,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,MAAD,CAAY,CACtC,MAAO,kBAAOC,QAAP,8NAEwBlB,KAAK,CAACmB,GAAN,mDAAqDF,MAArD,EAFxB,SAEOG,QAFP,eAGOd,WAHP,CAGqBc,QAAQ,CAACC,IAH9B,CAICC,OAAO,CAACC,GAAR,CAAYjB,WAAZ,EACMkB,gBALP,CAK0BjB,cAAc,CAACD,WAAD,CALxC,CAMCgB,OAAO,CAACC,GAAR,CAAY,kBAAZ,EACAD,OAAO,CAACC,GAAR,CAAYC,gBAAZ,EACAN,QAAQ,CAACb,gBAAgB,CAACmB,gBAAD,CAAjB,CAAR,CARD,iFAUCF,OAAO,CAACC,GAAR,cAVD,gCAWQ,KAXR,oEAAP,CAcH,CAfM","sourcesContent":["import { ADD_MESSAGE, GET_MESSAGE_LIST } from \"./messageActionsTypes\"\r\nimport axios from \"axios\";\r\n\r\n// Add message action\r\nexport const addMessage = (senderName, text) => ({\r\n    type: ADD_MESSAGE,\r\n    senderName: senderName,\r\n    text: text\r\n})\r\n\r\n// Fetch messages actions\r\nexport const fetchMessageList = (messageList) => ({\r\n    type: GET_MESSAGE_LIST,\r\n    messageList: messageList\r\n})\r\n\r\n// Format message list to keep only sender name and text\r\nconst formatMessages = (messageList) => {\r\n    const formattedMessageList = [];\r\n\r\n    for (const message of messageList) {\r\n        const formattedMessage = { text: message.text, senderName: null }\r\n        if (message.speaker != null) {\r\n            formattedMessage.senderName = message.speaker.username\r\n        }\r\n        if (message.guest != null) {\r\n            formattedMessage.senderName = message.guest.pseudo\r\n        }\r\n        formattedMessageList.push(formattedMessage)\r\n    }\r\n\r\n    return formattedMessageList;\r\n}\r\n\r\n// Get message list\r\nexport const getMessageList = (chatId) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8081/api/messages/chat/${chatId}`);\r\n            const messageList = response.data\r\n            console.log(messageList);\r\n            const formattedMsgList = formatMessages(messageList);\r\n            console.log(\"get message list\");\r\n            console.log(formattedMsgList);\r\n            dispatch(fetchMessageList(formattedMsgList));\r\n        } catch(e) {           \r\n            console.log(e);\r\n            return false;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}